var SearchFiles = ["GUID-64DD8072-6E57-4604-A82E-C848D7527955.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-7DCE8764-DEA2-453D-86AA-1C02EB9C5AAC.html",
							"GUID-D41DC58E-4197-40C3-B2E5-298EE2491305.html",
							"GUID-D41DC58E-4197-40C3-B2E5-298EE2491305.html",
							"GUID-D41DC58E-4197-40C3-B2E5-298EE2491305.html",
							"GUID-D41DC58E-4197-40C3-B2E5-298EE2491305.html",
							"GUID-00146421-1EA8-48A6-9637-4AE38CC69A31.html",
							"GUID-00146421-1EA8-48A6-9637-4AE38CC69A31.html",
							"GUID-00146421-1EA8-48A6-9637-4AE38CC69A31.html",
							"GUID-00146421-1EA8-48A6-9637-4AE38CC69A31.html",
							"GUID-00146421-1EA8-48A6-9637-4AE38CC69A31.html",
							"GUID-00146421-1EA8-48A6-9637-4AE38CC69A31.html",
							"GUID-46A687C1-607D-45CA-8E2C-E10E16EF22A7.html",
							"GUID-46A687C1-607D-45CA-8E2C-E10E16EF22A7.html",
							"GUID-46A687C1-607D-45CA-8E2C-E10E16EF22A7.html",
							"GUID-46A687C1-607D-45CA-8E2C-E10E16EF22A7.html",
							"GUID-46A687C1-607D-45CA-8E2C-E10E16EF22A7.html",
							"GUID-103308B4-FF34-41B2-A825-F2C6837EC078.html",
							"GUID-103308B4-FF34-41B2-A825-F2C6837EC078.html",
							"GUID-103308B4-FF34-41B2-A825-F2C6837EC078.html",
							"GUID-103308B4-FF34-41B2-A825-F2C6837EC078.html",
							"GUID-103308B4-FF34-41B2-A825-F2C6837EC078.html",
							"GUID-C95FB72C-D74D-49D7-B5C4-BD8464838039.html",
							"GUID-C95FB72C-D74D-49D7-B5C4-BD8464838039.html",
							"GUID-C95FB72C-D74D-49D7-B5C4-BD8464838039.html",
							"GUID-C95FB72C-D74D-49D7-B5C4-BD8464838039.html",
							"GUID-C95FB72C-D74D-49D7-B5C4-BD8464838039.html",
							"GUID-79933B21-92EE-4851-BCFD-566505CF43DF.html",
							"GUID-79933B21-92EE-4851-BCFD-566505CF43DF.html",
							"GUID-79933B21-92EE-4851-BCFD-566505CF43DF.html",
							"GUID-79933B21-92EE-4851-BCFD-566505CF43DF.html",
							"GUID-79933B21-92EE-4851-BCFD-566505CF43DF.html",
							"GUID-E9C1573C-3116-41FF-B88B-424E4E4AEBF8.html",
							"GUID-E9C1573C-3116-41FF-B88B-424E4E4AEBF8.html",
							"GUID-E9C1573C-3116-41FF-B88B-424E4E4AEBF8.html",
							"GUID-E9C1573C-3116-41FF-B88B-424E4E4AEBF8.html",
							"GUID-E9C1573C-3116-41FF-B88B-424E4E4AEBF8.html",
							"GUID-915C13AA-4559-43AF-865E-210A114E9733.html",
							"GUID-915C13AA-4559-43AF-865E-210A114E9733.html",
							"GUID-915C13AA-4559-43AF-865E-210A114E9733.html",
							"GUID-915C13AA-4559-43AF-865E-210A114E9733.html",
							"GUID-915C13AA-4559-43AF-865E-210A114E9733.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-52D24502-1FE3-473D-9DA1-624A4E26166B.html",
							"GUID-DB7F0202-30DD-4848-AE43-CF154294E842.html",
							"GUID-F459DB00-6C0A-4DC0-99F6-C67C5C4A7C52.html",
							"GUID-F459DB00-6C0A-4DC0-99F6-C67C5C4A7C52.html",
							"GUID-F459DB00-6C0A-4DC0-99F6-C67C5C4A7C52.html",
							"GUID-D776A67C-BE2A-4EC3-A149-32AC22EB4C5A.html",
							"GUID-EC458E8F-7C6B-4F4A-929B-3DB23A6508CF.html",
							"GUID-BADEF0EB-B3EA-4EF9-8B9B-8DAC044C7957.html",
							"GUID-6D2D8401-87A9-4600-8700-F113BA941E5D.html",
							"GUID-AE60932A-703A-481E-817A-53DCFD93BA11.html",
							"GUID-0FD5A351-8B22-466E-90C3-3DCA88C651D3.html",
							"GUID-BD742FD9-613D-4BCD-9E9F-7A5E7A3BDCA2.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-7C51815B-F559-46A3-A8B7-3F48A517B4A4.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-BB3E45B9-E26C-4E97-8325-FBF9B81BBF81.html",
							"GUID-40C3ABB9-0449-4A53-94DF-0DFB4CE5540E.html",
							"GUID-40C3ABB9-0449-4A53-94DF-0DFB4CE5540E.html",
							"GUID-40C3ABB9-0449-4A53-94DF-0DFB4CE5540E.html",
							"GUID-40C3ABB9-0449-4A53-94DF-0DFB4CE5540E.html",
							"GUID-40C3ABB9-0449-4A53-94DF-0DFB4CE5540E.html",
							"GUID-40C3ABB9-0449-4A53-94DF-0DFB4CE5540E.html",
							"GUID-C129E413-3D92-4428-8646-BC9190FC7308.html",
							"GUID-456F0E35-F354-495B-990A-4260F78B7E1B.html",
							"GUID-456F0E35-F354-495B-990A-4260F78B7E1B.html",
							"GUID-456F0E35-F354-495B-990A-4260F78B7E1B.html",
							"GUID-45DFB9CF-9D14-4229-8684-879C5FE9ED4E.html",
							"GUID-5947E22A-1032-43CF-A6AB-AC31EBAAE0F1.html",
							"GUID-9E01D5E1-824A-4A25-AA2C-D6AC57E7FB37.html",
							"GUID-705D1F84-1489-4A43-9406-404760FD0167.html",
							"GUID-F541358A-9210-4065-B206-8CA48009BF68.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-34243CDA-B156-4D2B-B9C1-7ED5BE2586A6.html",
							"GUID-74562C24-BC96-4BBA-8346-836D98E39F8C.html",
							"GUID-74562C24-BC96-4BBA-8346-836D98E39F8C.html",
							"GUID-74562C24-BC96-4BBA-8346-836D98E39F8C.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-AE48AE71-0F91-444B-8AC3-C5C1939A37FB.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-8C38797E-1BBB-4ACF-A496-EEC03A6075AC.html",
							"GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html","GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html","GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html","GUID-F05182E4-B102-4775-A746-1FF37F465312.html","GUID-E8251634-7B15-4073-A103-5A5F128B8699.html","GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html","GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html","GUID-07985EED-D525-413B-AEFE-78B563328687.html","GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html"];

var SearchTitles = ["MPLAB® Harmony License",
"Microchip MPLAB® Harmony 3 Release Notes",
"Harmony 3 Wireless application examples for WINC1500 v3 6 1",
"Development kit and demo application support",
"New Features",
"Bug fixes",
"Known Issues",
"Development Tools",
"Harmony 3 Wireless application examples for WINC1500",
"Contents Summary",
"Code Examples",
"Documentation",
"WINC STA Bypass",
"Description",
"Downloading and building the application",
"Setting up SAME54 Xplained Pro board",
"Running the Application",
"How to create this project from scratch",
"TCP Server in SoftAP",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Wifi Provisioning via WPS",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Wifi Provisioning via SoftAP",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"TCP Client",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Power Save Mode",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"AP Scan",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"WINC1500 Socket Mode Demo Applications",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Setting up SAMA5D27-SOM1-EK1 Evaluation Kit",
"Setting up the SD Card",
"Running the Application",
"Steps to isolate/copy individual application(s) from the demo",
"WiFi Provisioning",
"WiFi Station Mode / Access Point Mode Demo",
"Station Mode",
"Access Point Mode",
"SSL Demo",
"SNTP Demo",
"Ping Demo",
"OTA Demo",
"MQTT Demo",
"Iperf Demo",
"Certificate Download OTA Demo",
"Example project creation - WINC Socket mode project with SAMD21",
"Hardware Setup",
"Steps to create the new example project",
"Project Creation",
"Project Selection",
"Framework Selection",
"Project Settings",
"Configuration Settings",
"Adding components in MH3",
"Core",
"SAMD21 Xplained pro component",
"Timer component",
"EIC component",
"Virtual Console",
"To add COMMAND component",
"SPI component",
"WINC Component",
"MHC PIN Configuration",
"Save and generate code",
"Application Code",
"Build and program the device",
"Output",
"Example project creation - WINC Socket mode project with SAME54",
"Hardware Setup",
"Steps to create the new example project",
"Project Creation",
"Project Selection",
"Framework Selection",
"Project Settings",
"Configuration Settings",
"Adding components in MH3",
"Core",
"SAME54 Xplained pro component",
"Timer component",
"EIC component",
"Virtual Console",
"To add COMMAND component",
"SPI component",
"WINC Component",
"MHC PIN Configuration",
"Save and generate code",
"Application Code",
"Build and program the device",
"Output",
"WINC1500 Bypass Mode Demo Applications",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Steps to isolate/copy individual application(s) from the demo",
"WiFi Provisioning",
"WiFi Station Mode / Access Point Mode Demo",
"Station Mode",
"Access Point Mode",
"SSL Demo",
"SNTP Demo",
"Iperf Demo",
"Ping Demo",
"MQTT Demo",
"Create your first WINC1500 Bypass mode example using Harmony TCP/IP stack",
"Overview",
"Software Details",
"Hardware Setup",
"Creating a new Harmony project",
"Add TCP/IP Components",
"Application Layer Configurator",
"Transport Layer Configurator",
"Network Layer Configurator",
"Driver Layer Configurator",
"Basic Configuration",
"Satisfying Module Dependencies",
"Satisfy Timer dependency:",
"Satisfy Console dependency:",
"Satisfy TCP/IP Stack's (i e WINC's) SPI dependency:",
"Satisfy Transport Layer LIB_CRYPTO Dependency:",
"Satisfy WINC's External Interrupt dependency:",
"Project Heap Configuration",
"WINC Driver Configuration",
"Pin Configuration",
"Code Generation",
"Application Coding",
"Build the Application",
"Program the Application",
"Test the Application",
"References",
"Supported Network Modes in WINC",
"Socket Mode",
"Bypass Mode",
"WINC Devices – Integrated Serial Flash Memory Download Procedure",
"Introduction",
"Firmware update project",
"Download wireless repository from Github",
"Hardware Setup",
"Hardware setup for SAMA5D27 with WINC1500 WiFi 7 Click board",
"Serial Bridge Application",
"Serial Bridge Application for Harmony 3",
"Hardware Setup",
"General Information on Firmware Update",
"Scripts",
"Commands Logs",
"ATWINC1500/ATWINC3400 Binary Tools",
"Building Firmware Image",
"image_tool Usage",
"Commands Logs",
"Programming Firmware Image",
"winc_programmer_uart Tool Usage",
"Commands logs",
"Download Failure Troubleshooting",
"Create WINC Project - Getting Started",
"Download wireless repository from Github",
"Pin mapping between host and WINC",
"SPI interface",
"Power up pins",
"WINC1500 Power up pins",
"WINC3400 Power up pins",
"Interrupt pin",
"Microchip Information",
"The Microchip Website",
"Product Change Notification Service",
"Customer Support",
"Microchip Devices Code Protection Feature",
"Legal Notice",
"Trademarks",
"Quality Management System",
"Worldwide Sales and Service"];

var SearchInfo = [" MPLAB® Harmony License IMPORTANT: READ CAREFULLY MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS TO ACCEPT THE TERMS OF THIS LICENSE CLICK \"I ACCEPT\" AND PROCEED WITH THE DOWNLOAD OR INSTALL IF YOU DO NOT ACCEPT THESE LICENSE TERMS CLICK \"I DO NOT ACCEPT \" AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK This Nonexclusive Software License Agreement (\"Agreement\") is between you your heirs agents successors and assigns (\"Licensee\") and Microchip Technology Incorporated a Delaware corporation with a principal place of business at 2355 W Chandler Blvd Chandler AZ 85224-6199 and its subsidiary Microchip Technology (Barbados) II Incorporated (collectively \"Microchip\") for Microchip's MPLAB Harmony Integrated Software Framework (\"Software\") and accompanying documentation (\"Documentation\") The Software and Documentation are licensed under this Agreement and not sold U S copyright laws and international copyright treaties and other intellectual property laws and treaties protect the Software and Documentation Microchip reserves all rights not expressly granted to Licensee in this Agreement License and Sublicense Grant (a) Definitions As used this Agreement the following terms shall have the meanings defined below: (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920 which are not covered under this Agreement that use or implement the Software (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation if any) and error corrections improvements and updates to such code provided by Microchip in its sole discretion if any (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation if any) and error corrections improvements updates modifications and derivatives of such code developed by Microchip Licensee or Third Party (v) \"Third Party\" means Licensee's agents representatives consultants clients customers or contract manufacturers (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products (b) Software License Grant Subject to the terms of this Agreement Microchip grants strictly to Licensee a personal worldwide non-exclusive non-transferable limited license to use modify (except as limited by Section 1(f) below) copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below Any portion of the Software (including derivatives or modifications thereof) may not be: (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code) except as described in Section 2(d) below (c) Documentation License Grant Subject to all of the terms and conditions of this Agreement Microchip grants strictly to Licensee a perpetual worldwide non-exclusive license to use the Documentation in support of Licensee's use of the Software (d) Sublicense Grants Subject to terms of this Agreement Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: (i) Third Party may modify Source Code for Licensee except as limited by Section 1(f) below (ii) Third Party may program Software into Microchip Products for Licensee (iii) Third Party may use Software to develop and/or manufacture Licensee Product (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d) (e) Audit Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products whether located on Licensee's premises or elsewhere at any time announced or unannounced and in its sole and absolute discretion in order to ensure Licensee's adherence to the terms of this Agreement (f) License and Sublicense Limitation This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack profile or iAP protocol included in the Software Third Party Requirements Licensee acknowledges that it is Licensee's responsibility to comply with any third party license terms or requirements applicable to the use of such third party software specifications systems or tools including but not limited to SEGGER Microcontroller GmbH Co KG's rights in the emWin software and certain libraries included herein Microchip is not responsible and will not be held responsible in any manner for Licensee's failure to comply with such applicable terms or requirements Open Source Components Notwithstanding the license grants contained herein Licensee acknowledges that certain components of the Software may be covered by so-called \"open source\" software licenses (\"Open Source Components\") Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses including any license that as a condition of distribution requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components or requires that the distributor make the software available in source code format Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or \"About Box\" or in a file or files referenced thereby (and will include any associated license agreement notices and other related information therein) or the Open Source Components will contain or be accompanied by its own license agreement To the extent required by the licenses covering Open Source Components the terms of such licenses will apply in lieu of the terms of this Agreement and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b) To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components such restrictions will not apply to such Open Source Components Licensee's Obligations (a) Licensee will ensure Third Party compliance with the terms of this Agreement (b) Licensee will not: (i) engage in unauthorized use modification disclosure or distribution of Software or Documentation or its derivatives; (ii) use all or any portion of the Software Documentation or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations (c) Licensee must include Microchip's copyright trademark and other proprietary notices in all copies of the Software Documentation and its derivatives Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation (d) Licensee will defend indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims costs damages expenses (including reasonable attorney's fees) liabilities and losses including without limitation product liability claims directly or indirectly arising from or related to: (i) the use modification disclosure or distribution of the Software Documentation or any intellectual property rights related thereto; (ii) the use sale and distribution of Licensee Products or Third Party Products and (iii) breach of this Agreement THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT Confidentiality (a) Licensee agrees that the Software (including but not limited to the Source Code Object Code and library files) and its derivatives Documentation and underlying inventions algorithms know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (\"Proprietary Information\") Except as expressly and unambiguously allowed herein Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party's Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure If Licensee is required to disclose Proprietary Information by law court order or government agency such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure Licensee cooperates with Microchip to protect Proprietary Information and Licensee complies with any protective order in place and discloses only the information required by process of law (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated Licensee therefore agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief without the requirement for the posting of a bond in addition to all other remedies at law or in equity Ownership of Proprietary Rights (a) Microchip and its licensors retain all right title and interest in and to the Software and Documentation (\"Proprietary Rights\") including but not limited to: (i) patent copyright trade secret and other intellectual property rights in the Software Documentation and underlying technology; (ii) the Software as implemented in any device or system all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced) Further modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation To the extent such modifications and derivatives do not qualify as a \"work for hire \" Licensee hereby irrevocably transfers assigns and conveys the exclusive copyright thereof to Microchip free and clear of any and all liens claims or other encumbrances to the fullest extent permitted by law Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above (b) Licensee shall have no right to sell assign or otherwise transfer all or any portion of the Software Documentation or any related intellectual property rights except as expressly set forth in this Agreement Termination of Agreement Without prejudice to any other rights this Agreement terminates immediately without notice by Microchip upon a failure by License or Third Party to comply with any provision of this Agreement Further Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement Upon termination Licensee and Third Party will immediately stop using the Software Documentation and derivatives thereof and immediately destroy all such copies remove Software from any of Licensee's tangible media and from systems on which the Software exists and stop using disclosing copying or reproducing Software (even as may be permitted by this Agreement) Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement Dangerous Applications The Software is not fault-tolerant and is not designed manufactured or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\") Dangerous Applications include the operation of nuclear facilities aircraft navigation aircraft communication systems air traffic control direct life support machines weapons systems or any environment or system in which the failure of the Software could lead directly or indirectly to death personal injury or severe physical or environmental damage Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss damages and claims resulting from the use of the Software in Dangerous Applications Warranties and Disclaimers THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND EITHER EXPRESS OR IMPLIED INCLUDING WITHOUT LIMITATION ANY WARRANTY OF MERCHANTABILITY TITLE NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY BE UNINTERRUPTED OR ERROR-FREE MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT Limited Liability IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT NEGLIGENCE STRICT LIABILITY CONTRIBUTION BREACH OF WARRANTY OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL SPECIAL INDIRECT PUNITIVE OR CONSEQUENTIAL DAMAGES LOST PROFITS OR LOST DATA COST OF PROCUREMENT OF SUBSTITUTE GOODS TECHNOLOGY SERVICES OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF) OR OTHER SIMILAR COSTS The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation whichever is greater Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement General (a) Governing Law Venue and Waiver of Trial by Jury THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS Licensee agrees that any disputes arising out of or related to this Agreement Software or Documentation shall be brought in the courts of State of Arizona The parties agree to waive their rights to a jury trial in actions relating to this Agreement (b) Attorneys' Fees If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement the prevailing party shall be entitled to recover its reasonable attorneys' fees costs and other expenses (c) Entire Agreement This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof It shall not be modified except by a written agreement signed by an authorized representative of Microchip (d) Severability If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal invalid or unenforceable that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable (e) Waiver No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior concurrent or subsequent breach of the same or any other provisions hereof and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party (f) Export Regulation Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority (g) Survival The indemnities obligations of confidentiality and limitations on liability described herein and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement (h) Assignment Neither this Agreement nor any rights licenses or obligations hereunder may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger sale of all assets of Licensee or other corporate reorganization provided that assignee agrees in writing to be bound by the Agreement (i) Restricted Rights Use duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52 227-19 when applicable or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252 227-7013 and in similar clauses in the NASA FAR Supplement Contractor/manufacturer is Microchip Technology Inc 2355 W Chandler Blvd Chandler AZ 85225-6199 If Licensee has any questions about this Agreement please write to Microchip Technology Inc 2355 W Chandler Blvd Chandler AZ 85224-6199 USA ATTN: Marketing Microchip MPLAB Harmony Integrated Software Framework Copyright © 2015 Microchip Technology Inc All rights reserved License Rev 11/2015 Copyright © 2015 Qualcomm Atheros Inc All Rights Reserved Permission to use copy modify and/or distribute this software for any purpose with or without fee is hereby granted provided that the above copyright notice and this permission notice appear in all copies THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL DIRECT INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE DATA OR PROFITS WHETHER IN AN ACTION OF CONTRACT NEGLIGENCE OR OTHER TORTIOUS ACTION ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE ",
							" Microchip MPLAB® Harmony 3 Release Notes ",
							" Harmony 3 Wireless application examples for WINC1500 v3 6 1 ",
							" Development kit and demo application support Following table provides number of Wireless examples available for different development kits Development Kits MPLABx applications SAMD21 with WINC1500 Xpro 7 SAME54 with WINC1500 Xpro 9 SAMA5D27-SOM1-EK1 with WINC1500 Wifi 7 Click board 1 ",
							" New Features All applications have been migrated from MHC to MCC \"wifi_socket_demos\" is available for SAMA5D27-SOM1-EK1 with WINC1500 Wifi 7 Click board with latest \"wireless_wifi\" driver v3 7 1 Note Only \"wifi_socket_demos\" of SAMA5D27-SOM1-EK1 with WINC1500 Wifi 7 Click board is upgraded with the latest \"wireless_wifi\" driver v3 7 1 All Other applcations are having \"wireless_wifi\" driver v3 7 0 ",
							" Bug fixes \"wireless_wifi_apps_winc1500\" applications are upgraded with latest \"wireless_wifi\" driver v3 7 0 ",
							" Known Issues WolfMQTT(STA bypass mode) demo application need to build \"third_party/wolfMQTT/mqtt_socket c\" without xc32 option 'Make warnings into errors' as it uses the obsolete #include sys/errno h file in WolfMQTT repo Additional known issues can be found at WINC15x0-known-issues ",
							" Development Tools MPLAB® X IDE v6 00 MPLAB® X IDE plug-ins: MPLAB® Code Configurator (MCC) v5 1 17 MPLAB® XC32 C/C++ Compiler v4 10 ",
							" Harmony 3 Wireless application examples for WINC1500 MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices Refer to the following links for more information Microchip 32-bit MCUs Microchip 32-bit MPUs Microchip MPLAB X IDE Microchip MPLAB® Harmony Microchip MPLAB® Harmony Pages This repository contains the MPLAB® Harmony 3 Wireless application examples for WINC1500 Release Notes MPLAB® Harmony License To clone or download these applications from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  ",
							" Contents Summary Folder Description apps Contains Wireless service example applications docs Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine) Use github pages of this repository for viewing it online ",
							" Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more wireless usecases Name Description AP Scan (Socket mode) Demonstrates scan of near by HomeAP’s and connects to configured HomeAP TCP Client (Socket mode) Demonstrates WINC1500 TCP Client example application TCP Server (Socket mode) Demonstrates WINC1500 TCP Server example application Wi-Fi Provisioning using SoftAP (Socket mode) Demonstrates WINC1500 HomeAP Provisioning using SoftAP Wi-Fi Provisioning using WPS (Socket mode) Demonstrates WINC1500 HomeAP Provisioning using WPS Wi-Fi STA (Bypass/Ethernet mode) Demonstrates WINC1500 STA Bypass Ethenet mode application Power Save Mode Demonstrates WINC1500 low power modes Wi-Fi Socket Mode Demos Demonstrates the below WINC1500 applications in Socket Mode WiFi station mode/Access point mode demo OTA Demo SSL Demo Ping Demo Iperf Demo SNTP Demo MQTT Demo WiFi Provisioning Demo Certificate Download OTA Wi-Fi Bypass Mode Demos Demonstrates the below WINC1500 applications in Bypass Mode WiFi station mode/Access point mode demo SSL Demo Ping Demo Iperf Demo SNTP Demo MQTT Demo WiFi Provisioning Demo ",
							" Documentation Mode Document Description  Create WINC Project - Getting Started This is a getting-started guide for MPLABX IDE  Firmware Upgrade of WINC Devices This document explains in detail downloading procedure of firmware certificate and gain values into WINC serial flash through different supported serial interfaces like UART/I2C  Supported Modes In WINC devices Describes the supported modes in WINC devices Socket Mode WINC1500+SAMD21 This document explains a step by step approach to create a WINC1500 Socket mode project with SAMD21 host Socket Mode WINC1500+SAME54 This document explains a step by step approach to create a WINC1500 Socket mode project with SAME54 host Bypass Mode WINC1500+SAME54 This document explains a step by step approach to create a WINC1500 Bypass mode project with SAME54 host ",
							" WINC STA Bypass This example compiles the WINC STA Bypass application ",
							" Description This example implements a simple STA Client application on the SAM E54 Xplained Pro board with the ATWINC1500/3400 XPRO board where the WINC controller is in Bypass/Ethernet mode ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_winc_sta_bypass/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAME54 Xplained Pro board Connect the ATWINCxx00 Xpro Wi-Fi board to EXT1 XPRO Header of SAME54 Xplained baord Connect the Debug USB port on the SAME54 Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project in MPLAB® X IDE and open the app c file to change the access point parameters as shown in the picture below app_ap_parameters Build and program the generated code into the hardware using its IDE by using on-board EDBG programmer Open a terminal application (eg: TeraTerm) and configure the baud rate for 115200  open_teraterm Press the Reset button on the SAM E54 Xplained Ultra board The following messages will be visible on the terminal window run_teraterm_outout_1 Type ping PC's IP address in the terminal window and press Enter to see responses run_teraterm_ping You can also ping this board from your PC using cmd prompt as shown below run_pc_cmd_ping ",
							" How to create this project from scratch Following Wireless Wiki tutorial shows step-by-step process to create this project from scratch Create WINC1500 bypass mode demo from scratch ",
							" TCP Server in SoftAP This example compiles the TCP Server in SoftAP application which is used to demonstrate a TCP Client-Server connection ",
							" Description In this demonstration the WINC Driver will advertise a SoftAP The SoftAP connection is used to demonstrate a TCP client-server operation ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_tcp_server_in_softap/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for information ",
							" Wifi Provisioning via WPS This example compiles the Wifi Provisioning via WPS application which is used to provision a WiFi connection ",
							" Description In this demonstration the WINC Driver will move into WPS mode – PIN or PBC By activating the WPS mode in the AP concurrently a WiFi connection is established ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_provisioning_via_wps/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Please refer \"WINC Firmware Update Guide\" and \"WINC Driver Demonstrations\" for more information ",
							" Wifi Provisioning via SoftAP This example compiles the Wifi Provisioning via SoftAP application which is used to provision a WiFi connection ",
							" Description In this demonstration the WINC Driver will advertise a SoftAP The SoftAP connection is leveraged to provision a WiFi connection ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_provisioning_via_softap/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Please refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for more information ",
							" TCP Client The WINC example application demonstrates as a conventional open tcp client-server communication ",
							" Description In this demonstration the WINC Driver will connect to a BSS and begin a TCP client socket connection to a remote server service This demonstration can be configured in the following ways in the source code • The BSS to connect to • The TCP server address and port to connect to • The receive buffer size • The message which should be sent as the first data once connected to the server ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/tcp_client/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for information ",
							" Power Save Mode This example compiles the Power Save Mode application which is used to demonstrate WINC's low power mode ",
							" Description In this demonstration the WINC’s power save feature is demonstrated The Power save mode is demonstrated depending on the value configured in example_conf h - WDRV_WINC_PS_MODE_OFF WDRV_WINC_PS_MODE_AUTO_LOW_POWER and WDRV_WINC_PS_MODE_MANUAL ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/power_save_mode_example/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" for information Please note this example will not output any console messages ",
							" AP Scan This example compiles the AP Scan application which is used to scan for available BSSs and display the list ",
							" Description AP Scan application is used to scan for available BSSs and display the list It sends out a scan requests and lists responses of all Access points along with their signal strength ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/ap_scan/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for information ",
							" WINC1500 Socket Mode Demo Applications This example project demonstrates the WINC1500 applications of WiFi in Socket mode ",
							" Description This project has WiFi example applications of WINC1500 The user can configure the WiFi parameters and select the required example application through command ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is wireless_apps_winc1500/apps/wifi_socket_demos/firmware To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro sam_d21_xpro_winc1500 X MPLABX project for SAMD21 and WINC1500 Xplained pro sam_e54_xpro_winc1500_freertos X MPLABX project for SAME54 and WINC1500 Xplained pro using FreeRTOS sam_a5d27_som1_winc1500 X MPLABX project for SAMA5D27 and WINC1500 WiFi 7 Click board ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Setting up SAMA5D27-SOM1-EK1 Evaluation Kit Connect the WINC1500 WiFi 7 Click board to the MBus1 connector Connect the USB port (J10) on SOM1-Ek1 board to the computer using micro USB cable ",
							" Setting up the SD Card Copy the boot loader binary( boot bin) from \"firmware at91bootstrap_sam_a5d27_som1_ek X binaries\" onto the SD card Copy the application (harmony bin) from \"firmware/sam_a5d27_som1_winc1500 X/dist/sam_a5d27_som1_winc1500/production\" onto the SD card available after a successful build of the application ",
							" Running the Application Build and program the application project using its respective IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Use WiFi commands to configure WiFi parameters and use application commands to select the example application WiFi Commands Details Command Details Example wifi help Wi-Fi Service help command wifi help wifi set bootmode ssid_name auth_type pwd username/index Set Wi-Fi Configuration for Station(STA) mode or Access Point (AP) mode wifi set 2 DEMO_AP 2 12345678 wifi get Get Wi-Fi Configuration wifi get Wi-Fi command parameters information Parameter Sub Parameter bootmode 1- Access point(AP) mode 2- Station(STA) mode ssid_name SSID name authtype(Security type) 1 - OPEN Mode 2 - WPAPSK mode 3 - WEP mode 5 - 802 1x authentication MSCHAPV2 mode pwd(password) Password/passphrase username/index Username if authtype is 802 1x authentication MSCHAPV2 or Key Index if the authtype is WEP Application command parameters information Command Details Example appdemo help Application Service help command appdemo help appdemo start demo_id Select and start an application demo appdemo start 1 appdemo get Get the ID of currently running application demo appdemo get appdemo stop Stop the currently running application demo appdemo stop Application command parameters information Parameter Sub Parameter demo_ID 1 - WiFi station mode/Access point mode demo 7 - OTA Demo 8 - SSL Demo 9 - Ping Demo 10 - Iperf demo 11 - SNTP demo 18 - MQTT Demo 19 - Certificate download via OTA Demo List of Applications Application Description WiFi station mode/Access point mode demo Demonstartes the Station Mode or Access Point(AP) mode of WINC1500 OTA Demo Demonstrates OTA firmware upgrade SSL Demo Demonstrates TCP SSL Client application Ping Demo Demonstrates the Ping test Iperf Demo Demonstrates the iperf application SNTP Demo Demonstrates how to retrieve time information from the time server MQTT Demo Demonstrates MQTT Application WiFi Provisioning Demo Demonstartes the WiFi provisioning application Certificate download via OTA Demo Demonstartes Certificate download via OTA application ",
							" Steps to isolate/copy individual application(s) from the demo If the user wants to isolate an application follow the below mentioned steps For example the user wants to create an SNTP demo in Socket mode The SNTP demo uses the WiFi functionalities to get connected with the network So copy the files \" app_wifi c \" and \" app_wifi h \" from the path \" wireless_apps_winc1500/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc1500/apps/wifi_socket_demos/firmware/src \" to \"src\" folder of the new demo project Then add these files to the project Now user should copy and add the SNTP application files \" app_sntp c \" and \" app_sntp h \" from the path \" wireless_apps_winc1500/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc1500/apps/wifi_socket_demos/firmware/src \" to the \" src folder of the new demo project The \" app c \" and \" app h \" files need to be copied by the user These files integrate the SNTP application and WiFi functionalities Copy and add these two files from the same \"src\" path to the \"src\" folder of the new demo project In \"app c\" within \" APP_Initialize() \" function initialize the sntp application by calling \" APP_SntpInitialize(APPWiFiCallback) \" In \"app c\" file make sure that \" APP_WiFiTasks(wdrvHandle) \" is getting called from the \" APP_STATE_WDRV_OPEN \" state of \" APP_Tasks() \" state machine In the same state machine \" APP_Tasks() \" within the state \" APP_STATE_WDRV_APP_LOOP \" call the sntp application state machine \" APP_SntpTasks(handle) \" Now follow the steps mentioned in the SNTP demo document to run the SNTP demo using \"wifi\" \"sntp\" and \"appdemo\" commands Similarly for any application demo take the required application files along with WiFi files and \"app\" files to create the demo Note:  User has to make sure the project path does not exceed windows path limit User should reset the device before switching the application ",
							" WiFi Provisioning The WiFi Provisioning application is used for receiving Wi-Fi provisioning data via the microchip android application \"WiFi-Provisioning\" and then triggering a Wi-Fi connection Download the android application \"WiFi Provisioning\" of Microchip Technologies from App store Start the DUT as Access Point Use \"wifi set\" command to configure Access Point In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point wifi_prov_config Enter the command \"appdemo start 1\" to run the application wifi_prov_app_start Connect the mobile phone to this Access point The IP address of connected device will be displayed on the console wifi_prov_app_connected Open the WiFi Provisioning application in mobile phone Set the Server IP Address as \"192 168 1 1\" and Server Port Number as \"80\" Then press connect wif_prov_app_1 The list of available networks will be displayed in the next window wif_prov_app_2 Select the network and enter the password Then press \"SEND\" wifi_prov_app_3 The DUT will connect to the selected network and the IP address will be displayed on the terminal wifi_prov_app Back to top ",
							" WiFi Station Mode / Access Point Mode Demo This example demonstrates the use of the WINC1500 to behave as a Station or Access Point(AP) ",
							" Station Mode Configure the WiFi parameters using the \"wifi set \" command wifi_config Select and run the application using the command \"appdemo start 1\" ap_scan_start The application starts and perform scanning and connects to the WiFi ap_scan_console ",
							" Access Point Mode If the user wants to configure the device as Access Point configure the wifi using \"wifi set\" command In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point ap_mode_config_cmd Enter the command \"appdemo start 1\" to run the application ap_mode_config Connect a device to this Access point The IP address of connected device will be displayed on the console ap_mode_connected ",
							" SSL Demo This application demonstrates how a user can run a secured TCP Client on WINC1500 device In this application we open a secured html page 'https://www google com' Here the TCP SSL Client running on the WINC1500 device shall connect to server google com over a secured html port 443 and make a reuqtest for getting the html page Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"ssl https://www google com/\" ssl_url Enter the command \"appdemo start 1 8\" The device will connect to the network and IP address will be displayed on the terminal window After connecting to the AP the TCP SSL Client on the WINC1500 device shall connect to the Server - google com over the secured html port 443 ssl_start Note: The user needs to ensure that the server certificate is a part of the WINC FW Image in case a secured connection is needed with the server After connecting to google Server the TCP SSL Client on the WINC1500 device shall send a GET HTML request and the google server shall send in the html page ssl_response ",
							" SNTP Demo This example demonstrates the use of the WINC1500 to retrieve time information from the time server Follow the below mentioned steps to run the demo Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"sntp get\" sntp_get_cmd Enter the command \"appdemo start 1\" First the device will connect to the network and the IP address will be displayed on the terminal window sntp_start_wifi Enter the command \"appdemo start 11\" application will execute the SNTP command and the response will be displayed on the terminal window sntp_start ",
							" Ping Demo This application demonstrates how a user can run a ping test on WINC1500 device Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"sping ip_address no_of_ping \" sping_cmd Then enter the command \"appdemo start 1 9\" to run the Ping demo First the device will connect to the network After the IP address has displayed on the terminal window the ping command will start ping_response ",
							" OTA Demo This example demonstrates how to upgrade the WINC1500 firmware via OTA It downloads the WINC1500 firmware from an OTA download server which is a web server Use any HTTP server or hfs exe from http://www rejetto com/hfs/ Run the hfs exe Set the port number to 8000 in the hfs tool hfs_set_port Add the OTA firmware from the “ utilities m2m_ota_3a0 bin” to the root folder in the hfs exe tool hfs_add_file_path Note : Current OTA application ( utilities m2m_ota_3a0 bin ) image is of latest firmware 19 7 3 release user can select required firmware version of the OTA image as per their choice To create the required OTA firmware follow the steps mentioned in the document Firmware Upgrade of WINC Devices  Configure the wifi parameters using \"wifi set\" command wifi_config Copy the URL from hfs tool hfs_copy_url Enter the command \"ota image_url \" ota_url Enter the application command \"appdemo start 1 7\" to run the OTA demo First the device will connect to the network After the IP address has displayed on the terminal window application will execute the OTA command and starts the OTA firmware upgrade ota_console ",
							" MQTT Demo This application demonstrates how a user run a MQTT Client using third party Paho software on WINC1500 device The user would need to use \"MQTT fx\" third party Mqtt Client application to receive message posted by MQTT Client running on WINC1500 device once it connects to the MQTT server Download the MQTT fx Third Party Mqtt Client Application and open it on Laptop Connect the MQTT fx Application to the MQTT Server - broker hivemq com with port 1883 mqtt_fx1 Make the MQTT fx Application susbcribe to Topic MCHP/Sample/a mqtt_fx2 Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"mqtt start\" mqtt_start_cmd Enter the command \"appdemo start 1 18\" The device will connect to the network and IP address will be displayed on the terminal window The MQTT Client on the WINC1500 device shall connect to the MQTT Server - broker hivemq com mqtt_app_start After connecting to MQTT Server the MQTT Client on the WINC1500 device shall subscribe to Topic MCHP/Sample/b mqtt_subscribe_1 The MQTT Client on the WINC1500 device shall publish the message \"Hello\" to Topic MCHP/Sample/a mqtt_subscribe MQTT fx Application receives the message \"Hello\" on the Topic MCHP/Sample/a sent by the MQTT Client running on the WINC1500 mqtt_fx3 Publish message from MQTT fx Application on the Topic MCHP/Sample/b mqtt_fx4 The MQTT Client on the WINC1500 device receives the message on the Topic MCHP/Sample/b sent by the MQTT fx Application running on the laptop mqtt_publish_terminal Note: If the user wants to create a MQTT application project in Socket Mode and wants to use the Paho for MQTT Protocol One needs to follow the below mentioned steps From the \"paho mqtt embedded-c\" repo copy the folder \"paho mqtt embedded-c MQTTPacket\" to \"app_demos firmware src third_party paho mqtt embedded-c MQTTPacket\" of the new project directory From the \"paho mqtt embedded-c\" repo copy the folder \"paho mqtt embedded-c MQTTClient-C\" to \"app_demos firmware src third_party paho mqtt embedded-c MQTTClient-C\" of the new project directory It is important to have the porting files \"MCHP_winc c\" and \"MCHP_winc h\" in the project These porting files are available only in \"wifi_socket_demo\" project Copy the folder from \"wifi_socket_demos firmware src third_party paho mqtt embedded-c MQTTClient-C Platforms\" to \"app_demos firmware src third_party paho mqtt embedded-c MQTTClient-C Platforms\" of the new project directory Please make sure that the folder structure of the new project is same as mentioned above Enable MQTT User should enable the macro \"WINC_MQTT\" to enable the MQTT application For this follow the steps: Open project properties mqtt_properties_1 Select xc32-gcc mqtt_properties_2 Select \"preprocessing and messages\" from the \"Option Categories\" mqtt_properties_3 Select the \"add\" button of \"Preprocessor Macros\" mqtt_properties_4 Add the macro \"WINC_MQTT\" and press OK mqtt_properties_6 Back to top ",
							" Iperf Demo This application demonstrates how a user can run iperf application on WINC1500 device in Socket Mode Configure the wifi parameters using \"wifi set\" command wifi_config Enter \" siperf tcp/udp \" on the terminal window to select and start the iperf application demo in the DUT Command on DUT Details siperf tcp Starts the TCP server at the DUT siperf udp Starts the UDP server at the DUT siperf_tcp Enter the application command \"appdemo start 1 10 \" to run the iperf demo First the device will connect to the network The IP address will be displayed on the terminal window Then the TCP/UDP server will get started iperf_tcp_start After the \"TCP/UDP\" server has started the user wants to run the iperf commands on the PC to start the iperf application as TCP/UDP Client iperf command details Command on PC Details Example iperf -c Server_IP_Address -t time_peroid -i time_interval -r Setup the TCP Client in the PC iperf -c 192 168 43 27 -i 1 -t 10 -r iperf -u -c Server_IP_Address -t time_peroid -i time_interval -u -b bandwidth -r Setup the UDP Client in the PC iperf -u -c 192 168 43 27 -b 20M -i 1 -t 10 -r After receiving the \"Server Report\" on the terminal enter the iperf commands on the PC to set the iperf application as TCP/UDP server Command on PC Details Example iperf -s -i time_interval Setup the TCP Server in the PC iperf -s -i 1 iperf -s -u -i time_interval Setup the UDP Server in the PC iperf -s -u -i 1 ",
							" Certificate Download OTA Demo This example demonstrates how to download the TLS certificates into WINC1500 via OTA It downloads the certificates from an OTA download server which is a web server Note: This example will be only available with SAME54 Host Use any HTTP server or hfs exe from http://www rejetto com/hfs/ Run the hfs exe Add the certificates from “ utilities cert_store” to the root folder in the hfs exe tool cert_down_ota_1 Configure the wifi parameters using \"wifi set\" command cert_down_ota_3 Copy the URL from hfs tool cert_down_ota_2 Enter the command \"cert url \" cert_down_ota_4 Enter the application command \"appdemo start 1 19\" to run the Certificate download via OTA demo First the device will connect to the network cert_down_ota_5 After the IP address has displayed on the terminal window application will execute the CERT command and starts the certificate download cert_down_ota_6 ",
							" Example project creation - WINC Socket mode project with SAMD21 This document explains a step by step approach to create a WINC Socket mode project with SAMD21 host ",
							" Hardware Setup The document demonstrates the creation of a demo on the SAM D21 Xplained Pro board with the ATWINC1500 XPRO board The SAMD21 Xplained PRO contains a built-in programmer-debugger tool called Embedded Debugger (EDBG) which is used in this tutorial Following image shows the hardware setup samd21_57 ",
							" Steps to create the new example project Follow the below mwntioned steps to create the new WINC project in socket mode with SAMD21 from scratch ",
							" Project Creation Open MP Lab Go to File Menu and select New Project… samd21_1 ",
							" Project Selection Under the Projects section select 32bit MPLAB Harmony3 Project and click on Next samd21_2 ",
							" Framework Selection Enter the local system path where the packages are downloaded click Next samd21_3 ",
							" Project Settings Under {local system H3 path} wireless_apps_winc1500 apps create a folder name for the project (Ex: sample_project) Enter the full path including the newly created project folder Enter the Folder name and Project name and click on Next (To know about “Folder” and “Name” please click “Show visual Help” button) samd21_4 ",
							" Configuration Settings Enter a Name for the config setting folder select the Target device name Click Finish  samd21_5 Click Launch once Configuration Database Setup windows pops up samd21_6 MHC window and has three panes Available components: It lists all the components from downloaded packages Project Graph It is where the user adds components from Available components Configuration options Each component in project graph can be configured using Configuration options samd21_7 ",
							" Adding components in MH3 User should select required components for creating WINC project ",
							" Core The first component to enable is Core because core is the base component for many drivers and system components Go to Harmony in the Available components Select core samd21_8 Drag and drop it in the Project Graph  This will ask permission to activate Free RTOS Since this project does not require free RTOS click No  samd21_9 Core component appears in the Project Graph as shown below samd21_10 ",
							" SAMD21 Xplained pro component This example uses SAMD21 xplained pro board for host development board Enable component SAM D21 Xplained Pro BSP Go to Board Support Packages select SAM D21 Xplained Pro BSP samd21_11 Drag and drop it in the Project Graph samd21_12 ",
							" Timer component WINC driver needs driver for its delay functionality and user can select the any timer for this To enable Timer Go to Harmony - System Services Select TIME samd21_13 Drag and drop it in the Project Graph samd21_14 Right click on TMR in the TIME component Go to Satisfiers and select TC3 (user can select any timer) samd21_15 This adds TC3 connected with TIME samd21_16 ",
							" EIC component WINC device uses interrupt pin PB07 To configure PB07 EIC component must be enabled Go to Peripherals Select EIC samd21_17 Drag and drop it in the Project Graph samd21_18 Pin PB04 belongs to external interrupt channel 4 so EIC channel 4 has to be enabled and configured Select EIC in the Project Graph Please do the following changes in the Configuration Options: Check Enable EIC channel4 box and expand EIC channel4 Configuration Check Enable Interrupt box Change Enable Interrupt4 Edge detection to Falling Edge detection samd21_19 ",
							" Virtual Console Virtual Console is used to send debug messages and to receive commands from user Virtual console uses UART interface for communication Host SAMD21 uses pins PA22 and PA23 for UART interface to perform receive and transmit operation respectively These two pins belong to SERCOM3 of the host SAMD21 device For more information please refer section 5 4 2 (Virtual COM Port) of SAM D21 Xplained Pro User's Guide To enable and configure Virtual COM port: Go to System Services Select CONSOLE samd21_20 Drag and drop it in the Project Graph samd21_21 UART interface of SERCOM3 is used by CONSOLE  Right click on the UART port of Instance 0 of the CONSOLE component Go to Satisfiers and select SERCOM3  samd21_22 SERCOM3 appears in Project Graph connected with CONSOLE  samd21_23 SERCOM3 uses PAD for data reception Change the Receive pinout property to SERCOM PAD in the Configuration Options Change the TX ring buffer size of SERCOM3 configuration to \"2048\" samd21_24 CONSOLE has a dependency on DEBUG and COMMAND component To add DEBUG component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select DEBUG samd21_25 DEBUG component connected with CONSOLE appears in the Project Graph samd21_26 ",
							" To add COMMAND component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select COMMAND samd21_27 COMMAND component connected with CONSOLE appears in the Project Graph samd21_28 ",
							" SPI component WINC communicates with host using SPI interface So to establish a SPI connection between WINC and host three components are required They are: SPI Driver SERCOM0 (Peripheral library) WINC Driver To enable SPI driver In the Available Components go to Harmony - Drivers Select SPI samd21_29 Drag and drop it in the Project Graph samd21_30 Connect SERCOM0 with SPI driver Right click on the SPI interface of Instance 0 of the SPI component Go to Satisfiers and select SERCOM0 samd21_31 SERCOM0 appears in Project Graph connected with SPI driver samd21_32 Enable DMA for SPI driver Select instance 0 on SPI driver Go to Configurations Options and enable Use DMA for Transmit and Receive samd21_33 SERCOM0 uses PAD for Data out PAD for Clock and PAD for Slave select Change the SPI Data out Pad to the required Pad selection in the configuration options of SERCOM0 Enable the property SPI Master Hardware Slave Select samd21_34 ",
							" WINC Component Enable WINC Driver in the project: In the Available Components go to Wireless Select Driver - WINC samd21_35 Drag and drop it in the Project Graph samd21_36 Connect DRV_SPI interface of SPI interface 0 and WINC component samd21_37 User has the option to select between WINC1500 and WINC3400 using the WINC Device configuration option Enable Interrupt for WINC: In the configuration options for WINC expand Interrupt Source Select EIC channel 4 samd21_38 WINC3400 BLE: User can enable BLE option in WINC3400 as shown below winc3400_1 ",
							" MHC PIN Configuration This section summarizes the pin configuration requirement for MHC pin configuration component In MHC user can do pin configuration with the help of below steps Go to Tools in menu bar Select Pin Configuration samd21_39 The following window appears samd21_40 The pin can be configured as shown below RESETN pin configuration: For WINC1500 Go to PB06 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” samd21_41 For WINC3400 Go to PB01 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” samd21_winc3400_2 Interrupt pin configuration: For both WINC1500 and WINC3400 Go to PB04 pin column Select the function as EIC_EXTINT4 samd21_42 Chip enable pin configuration: For both WINC1500 and WINC3400 Go to PB05 of pin column Change the function to GPIO Name should be changed as “WDRV_WINC_CHIP_EN” samd21_43 SERCOM0 Pin configuration Go to PA04 pin column Select the function as SERCOM0_PAD0 Go to PA05 pin column Select the function as SERCOM0_PAD1 Go to PA06 pin column Select the function as SERCOM0_PAD2 Go to PA07 pin column Select the function as SERCOM0_PAD3 samd21_44 SERCOM3 Pin configuration Go to PA22 pin column Select the function as SERCOM3_PAD0 Go to PA23 pin column Select the function as SERCOM3_PAD1 samd21_45 ",
							" Save and generate code To save the modifications Click Save Click Generate Code samd21_46 In the next window click Generate samd21_47 ",
							" Application Code With above component and pin configuration in MHC user has required peripheral libraries and drivers for application development User can follow the API guidelines to develop the application or follow the below step to create simple application for getting started Go to the path {local system path} wireless_apps_winc1500 apps{User project name} firmware src app c app h example c Replace the following files with the files available in the AP scan example project {local system path} wireless_apps_winc1500 apps ap_scan firmware src As example c file does not come with default project create a new file called example c under Source Files Right click on Source Files Select Add Existing Item samd21_48 Go to {local system path} wireless_apps_winc1500 apps{User project name} firmware src Select example c samd21_49 In the file example c user can change the Home AP credentials samd21_50 ",
							" Build and program the device To compile the project Right click on the project Select Clean and Build samd21_51 After successful build make sure SAME54 XPRO is connected with local system Right click again on the project Select Make and Program Device samd21_52 ",
							" Output Expected output samd21_53 Note: If the user wants to create the project using the FrreRTOS then follow the below mentioned steps To add FreeRTOS component Select FreeRTOS from Thrid party Libraries - RTOS - FreeRTOS samd21_54 Drag and drop it in the Project Graph samd21_55 In the configuration options of FreeRTOS change the Total heap size to 10000 samd21_56 ",
							" Example project creation - WINC Socket mode project with SAME54 This document explains a step by step approach to create a WINC Socket mode project with SAME54 host ",
							" Hardware Setup The document demonstrates the creation of a demo on the SAM E54 Xplained Pro board with the ATWINC1500 XPRO board The SAME54 Xplained PRO contains a built-in programmer-debugger tool called Embedded Debugger (EDBG) which is used in this tutorial Following image shows the hardware setup same54_57 ",
							" Steps to create the new example project Follow the below mwntioned steps to create the new WINC project in socket mode with SAME54 from scratch ",
							" Project Creation Open MP Lab Go to File Menu and select New Project… same54_1 ",
							" Project Selection Under the Projects section select 32bit MPLAB Harmony3 Project and click on Next same54_2 ",
							" Framework Selection Enter the local system path where the packages are downloaded click Next same54_3 ",
							" Project Settings Under {local system H3 path} wireless_apps_winc1500 apps create a folder name for the project (Ex: sample_project) Enter the full path including the newly created project folder Enter the Folder name and Project name and click on Next (To know about “Folder” and “Name” please click “Show visual Help” button) same54_4 ",
							" Configuration Settings Enter a Name for the config setting folder select the Target device name Click Finish  same54_5 Click Launch once Configuration Database Setup windows pops up same54_6 MHC window and has three panes Available components: It lists all the components from downloaded packages Project Graph It is where the user adds components from Available components Configuration options Each component in project graph can be configured using Configuration options same54_7 ",
							" Adding components in MH3 User should select required components for creating WINC project ",
							" Core The first component to enable is Core because core is the base component for many drivers and system components Go to Harmony in the Available components Select core same54_8 Drag and drop it in the Project Graph  This will ask permission to activate Free RTOS Since this project does not require free RTOS click No  samd21_9 Core component appears in the Project Graph as shown below same54_10 ",
							" SAME54 Xplained pro component This example uses SAME54 xplained pro board for host development board Enable component SAM E54 Xplained Pro BSP Go to Board Support Packages select SAM E54 Xplained Pro BSP same54_11 Drag and drop it in the Project Graph same54_12 ",
							" Timer component WINC driver needs driver for its delay functionality and user can select the any timer for this To enable Timer Go to Harmony - System Services Select TIME same54_13 Drag and drop it in the Project Graph same54_14 Right click on TMR in the TIME component Go to Satisfiers and select TC3 (user can select any timer) same54_15 This adds TC3 connected with TIME same54_16 ",
							" EIC component WINC device uses interrupt pin PB07 To configure PB07 EIC component must be enabled Go to Peripherals Select EIC same54_17 Drag and drop it in the Project Graph same54_18 Pin PB07 belongs to external interrupt channel 7 so EIC channel 7 has to be enabled and configured Select EIC in the Project Graph Please do the following changes in the Configuration Options: Check Enable EIC channel4 box and expand EIC channel7 Configuration Check Enable Interrupt box Change Enable Interrupt7 Edge detection to Falling Edge detection same54_19 ",
							" Virtual Console Virtual Console is used to send debug messages and to receive commands from user Virtual console uses UART interface for communication Host SAME54 uses pins PB24 and PB25 for UART interface to perform receive and transmit operation respectively These two pins belong to SERCOM2 of the host SAME54 device For more information please refer section 5 4 2 (Virtual COM Port) of SAM E54 Xplained Pro User's Guide To enable and configure Virtual COM port: Go to System Services Select CONSOLE same54_20 Drag and drop it in the Project Graph same54_21 UART interface of SERCOM2 is used by CONSOLE  Right click on the UART port of Instance 0 of the CONSOLE component Go to Satisfiers and select SERCOM2  same54_22 SERCOM2 appears in Project Graph connected with CONSOLE  same54_23 SERCOM2 uses PAD for data reception Change the Receive pinout property to SERCOM PAD in the Configuration Options same54_24 CONSOLE has a dependency on DEBUG and COMMAND component To add DEBUG component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select DEBUG same54_25 DEBUG component connected with CONSOLE appears in the Project Graph same54_26 ",
							" To add COMMAND component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select COMMAND same54_27 COMMAND component connected with CONSOLE appears in the Project Graph same54_28 ",
							" SPI component WINC communicates with host using SPI interface So to establish a SPI connection between WINC and host three components are required They are: SPI Driver SERCOM4 (Peripheral library) WINC Driver To enable SPI driver In the Available Components go to Harmony - Drivers Select SPI same54_29 Drag and drop it in the Project Graph same54_30 Connect SERCOM4 with SPI driver Right click on the SPI interface of Instance 0 of the SPI component Go to Satisfiers and select SERCOM4 same54_31 SERCOM4 appears in Project Graph connected with SPI driver same54_32 Enable DMA for SPI driver Select instance 0 on SPI driver Go to Configurations Options and enable Use DMA for Transmit and Receive same54_33 SERCOM4 uses PAD for data reception change the SPI Data In Pad selection property to SERCOM PAD in the Configuration Options Enable the property SPI Master Hardware Slave Select same54_34 ",
							" WINC Component Enable WINC Driver in the project: In the Available Components go to Wireless Select Driver - WINC same54_35 Drag and drop it in the Project Graph same54_36 Connect DRV_SPI interface of SPI interface 0 and WINC component same54_37 User has the option to select between WINC1500 and WINC3400 using the WINC Device configuration option Enable Interrupt for WINC: In the configuration options for WINC expand Interrupt Source Select EIC channel 7 same54_38 WINC3400 BLE: User can enable BLE option in WINC3400 as shown below winc3400_1 ",
							" MHC PIN Configuration This section summarizes the pin configuration requirement for MHC pin configuration component In MHC user can do pin configuration with the help of below steps Go to Tools in menu bar Select Pin Configuration same54_39 The following window appears samd21_40 The pin can be configured as shown below RESETN pin configuration: For WINC1500 Go to PA06 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” samd21_41 For WINC3400 Go to PB05 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” winc3400_2 Interrupt pin configuration: For both WINC1500 and WINC3400 Go to PB07 pin column Select the function as EIC_EXTINT7 same54_42 Chip enable pin configuration: For both WINC1500 and WINC3400 Go to PA27 of pin column Change the function to GPIO Name should be changed as “WDRV_WINC_CHIP_EN” same54_43 BLE pin configuration: This configuration only applicable for WINC3400 Go to PA04 pin column Change the function to SERCOM0_PAD0 Go to PA05 pin column Change the function to SERCOM0_PAD1 Go to PA06 pin column Change the function to SERCOM0_PAD2 Go to PA07 pin column Change the function to SERCOM0_PAD3 winc3400_3 SERCOM2 (COM Port) and SERCOM4 (SPI) pin configuration: For both WINC1500 and WINC3400 Go to PB24 pin column Change the function to SERCOM2_PAD1 Go to PB25 pin column Change the function to SERCOM2_PAD0 Go to PB26 pin column Change the function to SERCOM4_PAD1 Go to PB27 pin column Change the function to SERCOM4_PAD0 Go to PB28 pin column Change the function to SERCOM4_PAD2 Go to PB29 pin column Change the function to SERCOM4_PAD3 same54_44 ",
							" Save and generate code To save the modifications Click Save Click Generate Code same54_46 In the next window click Generate same54_47 ",
							" Application Code With above component and pin configuration in MHC user has required peripheral libraries and drivers for application development User can follow the API guidelines to develop the application or follow the below step to create simple application for getting started Go to the path {local system path} wireless_apps_winc1500 apps{User project name} firmware src app c app h example c Replace the following files with the files available in the AP scan example project {local system path} wireless_apps_winc1500 apps ap_scan firmware src As example c file does not come with default project create a new file called example c under Source Files Right click on Source Files Select Add Existing Item Go to {local system path} wireless_apps_winc1500 apps{User project name} firmware src Select example c In the file example c user can change the Home AP credentials samd21_50 ",
							" Build and program the device To compile the project Right click on the project Select Clean and Build same54_51 After successful build make sure SAME54 XPRO is connected with local system Right click again on the project Select Make and Program Device same54_52 ",
							" Output Expected output samd21_53 Note: If the user wants to create the project using the FrreRTOS then follow the below mentioned steps To add FreeRTOS component Select FreeRTOS from Thrid party Libraries - RTOS - FreeRTOS samd21_54 Drag and drop it in the Project Graph samd21_55 In the configuration options of FreeRTOS change the Total heap size to 10000 samd21_56 ",
							" WINC1500 Bypass Mode Demo Applications This example project demonstrates the WINC1500 applications of WiFi in Bypass Mode ",
							" Description This project has WiFi example applications of WINC1500 The user can configure the WiFi parameters and select the required example application through command ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is wireless_apps_winc1500/apps/wifi_bypass_demos/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc1500 X MPLABX project for SAME54 and WINC1500 Xplained pro sam_e54_xpro_winc1500_freertos X MPLABX project for SAME54 and WINC1500 Xplained pro using FreeRTOS ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Build and program the application project using its respective IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Use WiFi commands to configure WiFi parameters and use application commands to select the example application WiFi Commands Details Command Details Example wifi help Wi-Fi Service help command wifi help wifi set bootmode ssid_name auth_type pwd username/index Set Wi-Fi Configuration for Station(STA) mode or Access Point (AP) mode wifi set 2 DEMO_AP 2 12345678 wifi get Get Wi-Fi Configuration wifi get Wi-Fi command parameters information Parameter Sub Parameter bootmode 1- Access point(AP) mode 2- Station(STA) mode ssid_name SSID name authtype(Security type) 1 - OPEN Mode 2 - WPAPSK mode 3 - WEP mode 5 - 802 1x authentication MSCHAPV2 mode pwd(password) Password/passphrase username/index Username if authtype is 802 1x authentication MSCHAPV2 or Key Index if the authtype is WEP Application command parameters information Command Details Example appdemo help Application Service help command appdemo help appdemo start demo_id Select and start an application demo appdemo start 1 appdemo get Get the ID of currently running application demo appdemo get appdemo stop Stop the currently running application demo appdemo stop Application command parameters information Parameter Sub Parameter demo_ID 1 - WiFi station mode/Access point mode demo 8 - SSL Demo 9 - Ping Demo 10 - Iperf demo 11 - SNTP demo 18 - MQTT Demo List of Applications Application Description WiFi station mode/Access point mode demo Demonstartes the Station Mode or Access Point(AP) mode of WINC1500 SSL Demo Demonstrates TCP SSL Client application Ping Demo Demonstrates the Ping test Iperf Demo Demonstrates the iperf application SNTP Demo Demonstrates how to retrieve time information from the time server MQTT Demo Demonstrates MQTT Application WiFi Provisioning Demo Demonstartes the WiFi provisioning application ",
							" Steps to isolate/copy individual application(s) from the demo If the user wants to isolate an application follow the below mentioned steps For example the user wants to isolate SNTP demo The SNTP demo uses the WiFi functionalities to get connected with the network So copy the files \" app_wifi c \" and \" app_wifi h \" from the path \" wireless_apps_winc1500/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc1500/apps/wifi_socket_demos/firmware/src \" to \"src\" folder of the new demo project Then add these files to the project Now user should copy and add the SNTP application files \" app_sntp c \" and \" app_sntp h \" from the path \" wireless_apps_winc1500/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc1500/apps/wifi_socket_demos/firmware/src \" to the \" src folder of the new demo project The \" app c \" and \" app h \" files need to be copied by the user These files integrate the SNTP application and WiFi functionalities Copy and add these two files from the same \"src\" path to the \"src\" folder of the new demo project In \"app c\" within \" APP_Initialize() \" function initialize the sntp application by calling \" APP_SntpInitialize(APPWiFiCallback) \" In \"app c\" file make sure that \" APP_WiFiTasks(wdrvHandle) \" is getting called from the \" APP_STATE_WDRV_OPEN \" state of \" APP_Tasks() \" state machine In the same state machine \" APP_Tasks() \" within the state \" APP_STATE_WDRV_APP_LOOP \" call the sntp application state machine \" APP_SntpTasks(handle) \" Now follow the steps mentioned in the SNTP demo document to run the SNTP demo using \"wifi\" \"sntp\" and \"appdemo\" commands Similarly for any application demo take the required application files along with WiFi files and \"app\" files to create the demo Note:  User has to make sure the project path does not exceed windows path limit User should reset the device before switching the application ",
							" WiFi Provisioning The WiFi Provisioning application is used for receiving Wi-Fi provisioning data via the microchip android application \"WiFi-Provisioning\" and then triggering a Wi-Fi connection Download the android application \"WiFi Provisioning\" of Microchip Technologies from App store Start the DUT as Access Point Use \"wifi set\" command to configure Access Point In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point ap_mode_config_cmd Enter the command \"appdemo start 1\" to run the application wifi_prov_app_start Connect the mobile phone to this Access point The IP address of connected device will be displayed on the console wifi_prov_app_connected Open the WiFi Provisioning application in mobile phone Set the Server IP Address as \"192 168 1 1\" and Server Port Number as \"6666\" Then press connect wif_prov_app_1 The list of available networks will be displayed in the next window wif_prov_app_2 Select the network and enter the password Then press \"SEND\" wifi_prov_app_3 The DUT will connect to the selected network and the IP address will be displayed on the terminal wifi_prov_app ",
							" WiFi Station Mode / Access Point Mode Demo This example demonstrates the use of the WINC1500 to behave as a Station or Access Point(AP) ",
							" Station Mode Configure the WiFi parameters using the \"wifi set \" command wifi_config Select and run the application using the command \"appdemo start 1\" ap_scan_start The application starts and perform scanning and connects to the WiFi ap_scan_console ",
							" Access Point Mode If the user wants to configure the device as Access Point configure the wifi using \"wifi set\" command In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point ap_mode_config_cmd Enter the command \"appdemo start 1\" to run the application ap_mode_config Connect a device to this Access point The IP address of connected device will be displayed on the console ap_mode_connected ",
							" SSL Demo This application demonstrates how a user can run a secured TCP Client on WINC1500 device In this application we open a secured html page 'https://www google com' Here the TCP SSL Client running on the WINC1500 device shall connect to server google com over a secured html port 443 and make a reuqtest for getting the html page Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"ssl https://www google com/\" ssl_url Enter the command \"appdemo start 1 8\" The device will connect to the network and IP address will be displayed on the terminal window After connecting to the AP the TCP SSL Client on the WINC1500 device shall connect to the Server - google com over the secured html port 443 ssl_start Note: The user needs to ensure that the server certificate is a part of the WINC FW Image in case a secured connection is needed with the server After connecting to google Server the TCP SSL Client on the WINC1500 device shall send a GET HTML request and the google server shall send in the html page ssl_response ",
							" SNTP Demo This example demonstrates the use of the WINC1500 to retrieve time information from the time server Follow the below mentioned steps to run the demo Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"sntp get\" sntp_get_cmd Enter the command \"appdemo start 1 11\" to run the SNTP demo First the device will connect to the network After the IP address has displayed on the terminal window application will execute the SNTP command and the response will be displayed on the terminal wimdow sntp_response ",
							" Iperf Demo This application demonstrates how a user can run iperf application on WINC1500 device in Bypass mode Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"appdemo start 1\" to set the DUT(Device Under Test) in station mode It will connect to the wifi network and the IP address will be displayed on the terminal iperf_connected The user should enter the iperf commands in the terminal window (for DUT) and in the iperf application which is available in the PC Protocol PC DUT Command on PC Command on DUT UDP Client Server iperf -u -c Server_IP_Address -t time_peroid -i time_interval -u -b bandwidth e g : iperf -u -c 192 168 43 27 -b 20M -i 1 -t 10 iperf -s -u -i time_interval e g : iperf -s -u -i 1 UDP Server Client iperf -s -u -i time_interval e g : iperf -s -u -i 1 iperf -u -c Server_IP_Address -t time_peroid -i time_interval -u -b bandwidth e g : iperf -u -c 192 168 43 87 -b 20M -i 1 -t 10 TCP Client Server iperf -c Server_IP_Address -t time_peroid -i time_interval e g: iperf -c 192 168 43 27 -i 1 -t 10 iperf -s -i time_interval e g: iperf -s -i 1 TCP Server Client iperf -s -i time_interval e g: iperf -s -i 1 iperf -c Server_IP_Address -t time_peroid -x bandwidth e g: iperf -c 192 168 43 87 -x 10M -t 10 ",
							" Ping Demo This application demonstrates how a user can run a ping test on WINC1500 device in Bypass mode Configure the wifi parameters using \"wifi set\" command wifi_config Enter the Then enter the command \"appdemo start 1\" Then the device will connected to the AP and the IP address will be displayed on the terminal ping_bypass_ip Enter the command \"ping ip_address \" It will start pinging the corresponding IP address ping_bypass_response ",
							" MQTT Demo This application demonstrates how a user run a MQTT Client using third party Paho software on WINC1500 device The user would need to use \"MQTT fx\" third party Mqtt Client application to receive message posted by MQTT Client running on WINC1500 device once it connects to the MQTT server Download the MQTT fx Third Party Mqtt Client Application and open it on Laptop Connect the MQTT fx Application to the MQTT Server - mqtt eclipseprojects io with port 1883 mqtt_bypass_fx1 Make the MQTT fx Application susbcribe to Topic \"MQTT_NET_Client topic\" mqtt_bypass_fx2 Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"mqtt start\" mqtt_bypass_start Enter the command \"appdemo start 1 18\" The device will connect to the network and IP address will be displayed on the terminal window mqtt_bypass_ap_connected The MQTT Client on the WINC1500 device shall connect to the MQTT Server - mqtt eclipseprojects io mqtt_bypass_client_connected After connecting to MQTT Server the MQTT Client on the WINC1500 device shall subscribe to Topic \"MQTT_NET_Client topic\" mqtt_bypass_subscribed The MQTT Client on the WINC1500 device shall publish the message \"MQTT NET Demo Test Message\" to Topic \"MQTT_NET_Client topic\" mqtt_bypass_published MQTT fx Application receives the message \"MQTT NET Demo Test Message\" on the Topic \"MQTT_NET_Client topic\" sent by the MQTT Client running on the WINC1500 mqtt_bypass_fx3 The message \"MQTT NET Demo Test Message\" will be published from MQTT fx Application Since it is subcribing to the same topic \"MQTT_NET_Client topic\" The MQTT demo will exit after publishing the message mqtt_bypass_completed NOTE: Sometimes the MQTT demo will give connection error if the default broker mqtt eclipseprojects io is down If so try the demo with this broker : broker hivemq com Back to top ",
							" Create your first WINC1500 Bypass mode example using Harmony TCP/IP stack ",
							" Overview This tutorial is a getting-started guide to demonstrate how to create a WINC1500 Bypass (Ethernet) mode example using MPLAB® Harmony v3 TCP/IP stack This tutorial implements a simple STA Client application on a microcontroller development board This will guide you through the steps required to create a new TCP/IP application using MPLAB® Harmony 3 modules ",
							" Software Details This tutorial is tested with following tool versions MPLAB® X IDE v5 40 MPLAB® XC32/32++ C Compiler v2 40 MPLAB® Harmony Configurator Plugin (MHC) v3 6 0 MPLAB® Harmony v3 Software Framework Note : Harmony 3 comes in modular format where user can choose which modules to work with In order to create WINC1500 bypass mode example following modules are essential Harmony Content Manager tool can be used to download/clone the repositories from Github bsp v3 9 0 core v3 9 2 csp v3 9 1 dev_packs v3 9 0 mhc v3 8 0 net v3 7 2 wireless_wifi v3 5 1 wireless_apps_winc1500 v3 4 1 ",
							" Hardware Setup The getting-started guide demonstrates the creation of a TCP/IP demo on the SAM E54 Xplained Pro board with the ATWINC1500 XPRO board These steps can be applied for other supported development boards applying the device/board specific configuration changes The microcontroller should be supported by NET and Wireless modules within H3 At this point SAM E54 is the only device supported by both modules New device support is constantly added to modules Check the individual module release notes for more details about device support SAME54 Xplained PRO ATWINC1500 XPRO The SAME54 Xplained PRO contains a built-in programmer-debugger tool called Embedded Debugger (EDBG) which is used in this tutorial Embedded Debugger ( EDBG ) Following image shows the hardware setup Demonstration Hardware ",
							" Creating a new Harmony project Follow the steps to create a basic Harmony project The assumption is that H3 modules are cloned at \"C: microchip harmony v3\" Open the MPLAB® X IDE  Create a New Project by selecting File New Project  In the New Project window select 32-Bit MPLAB® Harmony 3 Project and click Next  Microchip Technology Note: The MPLAB® Harmony 3 Project will not be displayed if the MPLAB® Harmony 3 Configurator plug-in is not installed It has to be installed before continuing with the next steps In the Framework Path enter the path of the folder to which the MPLAB® Harmony 3 packages are downloaded Microchip Technology In the Project Setting dialog window fill in or select the information needed as follows: Location : First create a \"winc_bypass_getting_started\" folder in the location of your choice (for example create the application project inside the 'C: microchip harmony v3 wireless_apps_winc1500 apps' folder) Then enter the path in this field Folder : Project Folder name For example sam_e54_xpro_winc1500  Name : Project Name i e winc_bypass_getting_started_sam_e54_xpro_winc1500  Path : Selecting the above fields auto populates the Path  Microchip Technology Click Next  In the Configuration Settings dialog window fill in or select the information needed as follows: Name : Configuration Name For example sam_e54_xpro_winc1500  Target Device : Use the below table to chose the target device part number based on the demo board that you are using For this example: SAM E54 Xplained Pro uses ATSAME54P20A  The Device Filter textbox helps narrow down list of available devices as shown Microchip Technology Click Finish  First time when you create a Harmony 3 project \"Window Manager Selection Dialog\" appears The user can select \"Standalone\" or \"Native\" depending upon the preference \"Standalone\" opens the MHC in a separate window \"Native\" opens MHC as a window within MPLAB® X IDE Microchip Technology If the above dialog window doesn't appear then MHC can be launched by selecting MPLAB® Harmony 3 Configurator under Tools - Embedded - MPLAB® Harmony 3 Configurator  Microchip Technology In the MPLAB® Harmony Launcher window leave the launch path as default option i e MPLAB® Harmony Project Path but make sure it is correctly pointed to desired H3 cloned directory and click Launch  Microchip Technology In the Configuration Database Setup window leave the DFP and CMSIS paths as default and click Launch Microchip Technology MHC window will open now The default standalone Harmony configurator will be as shown below Different parts of configurator are: Available Components Active Components Project Graph Configuration Options Console Window Microchip Technology Depending upon the application needs the necessary components can be added from the Available Components Go to Available Components - Board Support Packages (BSPs) and double click on the Board support package for the target board Below example shows the BSP for SAME54 Xplained Ultra board Microchip Technology After adding BSP the Project Graph will look as below: Microchip Technology Basic components needed for creating a project will be available in project graph by default The next step would be to configure the components based on the application needs ",
							" Add TCP/IP Components The TCP/IP components can be added from the Available Components Go to Available Components - Libraries - TCPIP The TCP/IP components are categorized into 5 different groups and a configurator is available for each group These configurators are: TCP/IP Application Layer Configurator TCP/IP Transport Layer Configurator TCP/IP Network Layer Configurator TCP/IP Driver Layer Configurator TCP/IP Basic Configurator Microchip Technology Note: It is recommended to add the TCP/IP components using these configurators When the components are added using configurators the dependent modules will be auto-activated ",
							" Application Layer Configurator Under Available Components Select the TCP/IP Application Layer Configurator and double click This step will add the TCP/IP Application Layer Configurator inside the APPLICATION LAYER group Microchip Technology This step also creates a hierarchy of groups as Root- TCP/IP STACK- APPLICATION LAYER Verify the hierarchy by going View: dropdown and check out different layers Microchip Technology If you changed the view come back to APPLICATION LAYER view by using View: dropdown Select the TCP/IP Application Layer Configurator See the configurations options on right hand side Microchip Technology The different application protocols supported in the Harmony TCP/IP stack are listed Start selecting the required TCP/IP application layer protocols from the Configuration Options on right hand side For the Getting Started demo select the DHCP CLIENT This step will auto-activate all the dependent components Click Yes to add the Harmony Core component Microchip Technology Click No to for the FreeRTOS auto-activation as this demo does not need the FreeRTOS Microchip Technology Click Yes to add the TIME (sys_time) component Microchip Technology Click Yes to add the CONSOLE (sys_console) component Microchip Technology Click Yes to connect the CONSOLE component with TCP/IP CORE  Microchip Technology Click Yes to add the DEBUG (sys_debug) component Microchip Technology Click Yes to connect the CONSOLE component with TCP/IP CORE  Microchip Technology Click Yes to add the IPv4 component in TCP/IP Network Layer Microchip Technology Click Yes to add the ARP component in TCP/IP Network Layer Microchip Technology Click Yes to add the UDP component in TCP/IP Transport Layer Microchip Technology After the auto-activation of dependent components the DHCP CLIENT component is added to Project Graph Microchip Technology Add the DNS CLIENT to APPLICATION LAYER Microchip Technology ",
							" Transport Layer Configurator Click on View: dropdown and go to the TRANSPORT LAYER  Microchip Technology Select the TCP/IP Transport Layer Configurator  Microchip Technology UDP has been auto-activated while adding the Application Layer components Add the TCP protocol support for this demo Microchip Technology Click Yes to add the TCP component in the TCP/IP Transport Layer Microchip Technology ",
							" Network Layer Configurator Click on View: dropdown and go to the NETWORK LAYER  Microchip Technology Select the TCP/IP Network Layer Configurator  Microchip Technology Add the ICMPv4 protocol support for this demo Microchip Technology Click Yes to add the ICMPv4 component in the TCP/IP Network Layer Microchip Technology Select ICMPv4 component in project graph to show its configuration settings in Configuration Options window Enable checkbox for Use ICMPv4 Client We need this to be able to ping other devices Microchip Technology ",
							" Driver Layer Configurator Click on View: dropdown and go to the DRIVER LAYER  Microchip Technology Select the TCP/IP Driver Layer Configurator and enable WINC module checkbox Click Yes to add the WINC component in the TCP/IP Driver Layer Microchip Technology Click Yes to connect the WINC component with the NETCONFIG  Microchip Technology WINC component is added in the TCP/IP Driver Layer Microchip Technology ",
							" Basic Configuration Click on View: dropdown and go to the Basic Configuration layer Microchip Technology This layer contains TCP/IP stack's core configuration interface selection heap management MAC configuration etc Basic STACK Configuration and Network Configuration are already auto-activated during previous steps Microchip Technology Select the TCP/IP Basic Configurator and enable TCPIP CMD Microchip Technology Click Yes to connect the CMD component with the SYS Console  Microchip Technology Command module is added to the Basic Configuration layer Microchip Technology ",
							" Satisfying Module Dependencies The project needs few more Harmony components In this section we will add and configure the required components Click on View: dropdown and go to the Root layer Microchip Technology The Root layer will be as shown below The red diamond-shaped buttons are unsatisfied mandatory dependencies the connections might look messy at first Feel free to move around some boxes so that project graph looks pretty Microchip Technology Note: There are two ways to satisfy dependencies You can either right-click on red diamonds and select available satisfiers OR you can manually add components from Avilable Components window and manually connect diamonds Both ways are shown here ",
							" Satisfy Timer dependency: Right click on red diamond for TIME module From the list of Satisfiers select TC3  Microchip Technology Timer peripheral instance TC3 will be added to Root layer and connected to the TIMER module Microchip Technology ",
							" Satisfy Console dependency: From Available Components Peripherals SERCOM double-click on SERCOM2 to add it to current layer Microchip Technology SERCOM2 is added to the Root layer Microchip Technology To satisy Console UART dependency manually connect UART diamond from SERCOM2 with the UART diamond of CONSOLE module  Microchip Technology Select SERCOM2 in the Project Graph In the Configuration Options of SERCOM2  Set the TX Ring Buffer Size to 1024 Set the Receive Pinout to PAD  Microchip Technology ",
							" Satisfy TCP/IP Stack's (i e WINC's) SPI dependency: Right click on DRV_SPI red diamond of TCP/IP STACK module and select SPI as satisfier Microchip Technology Right click on red diamond of SPI driver module and select SERCOM4  Microchip Technology Select SERCOM4 in the Project Graph In the Configuration Options of SERCOM4  Set the Data IN pad to PAD Select Enable SPI Master Hardware Select checkbox Microchip Technology ",
							" Satisfy Transport Layer LIB_CRYPTO Dependency: Click on View : dropdown and go to the Tranport layer  Microchip Technology Right click on LIB_CRYPTO of TCP and select Cryptographic Library from Available Satisfiers Microchip Technology Right click on LIB_WOLFCRYPT of Cryptographic Library and select wolfCrypt Library from the list of Satisfiers Microchip Technology The project graph will become: Microchip Technology ",
							" Satisfy WINC's External Interrupt dependency: From Available Components Peripherals EIC double-click on EIC to add it to current Root layer Microchip Technology Select EIC in the Project Graph In the Configuration Options of EIC  Select Enable EIC channel 7  Select Enable Interrupt Set the Edge selection to Falling edge detection  Microchip Technology All necessary dependencies are care of ",
							" Project Heap Configuration Select the System in the Project Graph In Configuration Options set the Heap Size (bytes) to 96960  Microchip Technology ",
							" WINC Driver Configuration Click on View: dropdown and go to the DRIVER LAYER  Microchip Technology Select WINC module in project graph In the Configuration Options window select the Interrupt Source for WINC as recently enabled EIC Channel 7  Microchip Technology ",
							" Pin Configuration The I/O pins on the device can have alternate functions other than the general purpose I/O function Here we will configure the functionality of the I/O pins required for this demo Open MHC - Tools - Pin Configuration  Microchip Technology Configure the pins for EXT_INT7 SERCOM2 SERCOM4 and 2 GPIO as shown below Notice the GPIO pins must have Custom Name as shown in the figure Microchip Technology Microchip Technology ",
							" Code Generation Once Harmony components are added using MHC to the Project Graph it's time to generate the source files based on the configurations Generate the code by clicking the Generate Code button (marked in red) Microchip Technology Click the Save button to save the generated configuration Microchip Technology Microchip Technology Select the Merge Strategy as USER ALL Refer to the MHC documentation for different merge strategy options Microchip Technology Click the Generate button to start the code generation Microchip Technology ",
							" Application Coding Now you have the MPLAB® Harmony components configured for a TCP/IP application The Getting-Started demo implements a simple Wi-Fi STA application This application is written using the APIs provided by the MPLAB® Harmony TCP/IP Stack There is already a STA demo implemented at C: microchip harmony dev3 wireless_apps_winc1500 apps wifi_winc_sta_bypass Let's make use of those source files for the winc_bypass_getting_started demo Copy the application files (i e app c  app h ) from C: microchip harmony dev3 wireless_apps_winc1500 apps wifi_winc_sta_bypass firmware src  Paste the application files at our current project's location C: microchip harmony v3 wireless_apps_winc1500 apps winc_bypass_getting_started firmware src  Microchip Technology In MPLAB® X IDE project open the app c file that has been added to project and change the access point parameters as shown in the picture below Microchip Technology ",
							" Build the Application Open the project Properties by Right Clicking on the project name (winc_bypass_getting_started) Ensure that the XC32 Compiler Tool-chain and SAME54 EDBG hardware tool is selected Press OK  Microchip Technology Build the application by clicking on the Build Main Project  Microchip Technology Verify the build results Make sure that the build is successful Microchip Technology ",
							" Program the Application Now the project is ready to be programmed on the hardware board Refer to the hardware user-guide to see the different programming options supported The SAME54 Xplained board can be programmed using the on-board debugger EDBG  Connect a micro-USB cable from computer to the DEBUG USB port on the SAM E54 Xplained Ultra board Program the application by clicking on the Make and Program Device Main Project  Microchip Technology Make sure that the programming is successful ",
							" Test the Application The testing of the application is done using different console commands There will be a virtual COM port enumerated when a micro-USB cable from the computer is connected to the DEBUG USB port on SAM E54 Xplained Ultra board Open a terminal application (eg: TeraTerm) and configure the baud rate for 115200  Microchip Technology Press the Reset button on the SAM E54 Xplained Ultra board The following messages will be visible on the terminal window Microchip Technology Type ping PC's IP address in the terminal window and press Enter to see responses Microchip Technology You can also ping this board from your PC using cmd prompt as shown below Microchip Technology Currently WINC driver is configured not to display any logs You can change this setting in MHC by going to DRIVER LAYER and modifying the WINC configuration as shown below Microchip Technology After re-generating and re-programming with logging turned on you will see following output in tera term console run_teraterm_winc_log You have successfully created and tested your first WINC1500 Bypass mode Application ",
							" References TCP/IP Stack Library Help Create your first TCP/IP Application ",
							" Supported Network Modes in WINC WINC devices can work in two modes Socket mode Bypass mode ",
							" Socket Mode By default WINC firmware includes TCP/ IP Stack and Wifi/ BT MAC Socket Mode exports driver level APIs for the User to write his Application and configure / communicate the TCP/ IP Stack and the Wi-Fi Stack using these APIs ",
							" Bypass Mode In Bypass mode instead of using TCP/IP stack of WINC firmware user can use Harmony 3 TCP/IP stack on host side and directly access mac layer of WINC firmware via the WINC Driver APIs In this case TCP/IP stack of WINC firmware is bypassed ",
							" WINC Devices – Integrated Serial Flash Memory Download Procedure ATWINC1500/ATWINC3400 features an on-chip microcontroller and integrated SPI Flash memory for system firmware The serial flash memory also stores the root certificate required for TLS/SSL connection and the gain table values used by transceiver This application note explains in detail downloading procedure of firmware certificate and gain values into WINC serial flash through different supported serial interfaces like UART/I2C This document also covers some useful troubleshooting tips for downloading failures Features: Firmware download procedure Root certificate download procedure Gain table values download procedure Troubleshooting tips Common download procedure for WINC1500 and WINC3400 ",
							" Introduction The WINC1500 or WINC3400 firmware update project will be available in the path {local system path} wireless_wifi utilities wifi winc The latest firmware update project contains the new firmware images as well as the batch script and Shell script files used to download the firmware into Wi-Fi Network Controller (WINC) through SPI/UART ",
							" Firmware update project The ATWINC1500 and ATWINC3400 WiFi devices require firmware to be loaded into flash memory The ATWINC1500 and ATWINC3400 devices are preloaded with the firmware however it would be useful to update the latest firmware to take advantage of fixes and new features ",
							" Download wireless repository from Github Install MPLAB® X Integrated Development Environment (IDE) After the installation open the MPLAB IDE and launch H3 content manager from the IDE Please provide the framework path with the local system path This displays a new window as shown below Using this window user can download either all the packages or only the wireless packages with its required dependencies To download the wireless packages and its dependencies: Scroll down and select wireless_wifi wireless_apps_winc1500 and wireless_apps_winc3400  Click Download Selected It requests permission to download its dependencies Click OK In the License Window Select Accept All License Click Close Go to the local system path and check if the following packages are downloaded correctly The firmware upgrade tool for WINC devices will be available in : {local system path} wireless_wifi utilities wifi winc ",
							" Hardware Setup SAM D21 Xplained Pro Evaluation Kit (ATSAMD21-XPRO) - SAMD21 is used as a HostMCU ATWINC1500 / WINC3400 Xplained PRO Evaluation Kit (ATWINC1500-XPRO / ATWINC3400-XPRO) - Wi-Fi SPI slave device connected to SAMD21 HostMCU device The ATWINC1500 / ATWINC3400 device is attached to EXT1 of the SAMD21 Xplained Pro kit Plug a micro-USB cable from Windows computer to the debug USB port of the SAM D21 Xplained Pro Evaluation kit ",
							" Hardware setup for SAMA5D27 with WINC1500 WiFi 7 Click board Install JLink Program / Debug utility from Segger (https://www segger com/downloads/jlink/) for SOM1-Ek1 board JLink Debugger / Programmer Connect the WINC1500 WiFi 7 Click board to the MBus1 connector Connect the USB port (J10) on SOM1-Ek1 board to the computer using micro USB cable ",
							" Serial Bridge Application As the WINC device is connected to host MCU through SPI interface upgrading the WINC serial flash via the host MCU would be an easier solution Since WINC provides transparent access to host MCU the WINC serial flash can be read/written from host MCU The host MCU can program the serial (SPI) flash without the need for operational firmware in the WINC The host MCU running the serial bridge firmware is connected between computer and WINC SPI to download the firmware to WINC serial flash winc_programmer_UART (PC) —- samd21_xplained_pro_serial_bridge elf(Host) —- WINC SPI device ",
							" Serial Bridge Application for Harmony 3 Open MPLAB Go to File Menu and select Open Project In the next window select the Serial bridge project from {local system path} wireless_wifi apps serial_bridge firmware and click Open Project Build the project The click Make and Program Device button Note If the user is using SAMA5D27 host do not reset the board after programming the serial bridge application ",
							" Hardware Setup Power On Sequence To perform a serial flash download using the ATWINC1500 built-in UART it is mandatory that the ATWINC1500 chip is in the right bootloader state To do so the HostMCU must power up the ATWINC1500 chip and then perform the reset sequence as defined in the ATWINC1500 datasheet UART Pin Assignment Pin assignment of WINC1500 module UART are described in the following table On ATWINC1500 Xplained Pro TX and RX are available on through holes labeled “DEBUG_UART” for easy identification ATWINC1500 module pin name ATWINC1500 Xplained Pro pin name Function J14 UART_TX TXD J19 UART_RXD RXD Ensure that the HostMCU is powered up and ATWINC1500 built-in UART is connected to PC via a serial to USB converter ",
							" General Information on Firmware Update The firmware upgrade tool for the WINC devices contains Scripts Binary Tools ",
							" Scripts The \"winc\" folder in {local system path} wireless_wifi utilities wifi path contains the following two scripts winc_flash_tool cmd This script is for the firmware upgrade in Windows and it uses the \"image_tool\" and \"winc_programmer_uart/i2c\" to build and program the firmware binary image to the WINC devices winc_flash_tool cmd Usage Usage Command Example To erase the entire flash winc_flash_tool cmd /p COM3 /d device_name /v version /e To create and program the Firmware Image winc_flash_tool cmd /p COM3 /d device_name /v version /e /x /i prog /w To create and program the All-in-one(AIO) Image winc_flash_tool cmd /p COM3 /d device_name /v version /e /x /i aio /w To create OTA Image winc_flash_tool cmd /p COM3 /d device_name /v version /i ota Writing to \"Root certificate\" region winc_flash_tool cmd /p COM3 /d device_name /v version /i root /w Writing to \"HTTP files\" region winc_flash_tool cmd /p COM3 /d device_name /v version /i http /w To read the entire flash winc_flash_tool cmd /p COM3 /d device_name /v version /r device_name : WINC3400/WINC1500 version : Firmware version of winc3400/winc1500 Arguments Details /p Serial port for UART mode /d WINC device type /s Aardvark serial number /v Firmware version number /e Erase entire device before programming /x Read XO offset before creating programming image /i Image type:prog - Programmer formataio - All in one image raw binary ota - OTAroot - Root certificates in programmer format http - HTTP files in programmer format /w Write to device /f Filename of image file to create /r Read entire flash from device ",
							" Commands Logs To create and program the Firmware Image Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc1500 /v 19 7 6 /e /x /i prog /w firmware_upgrade To create OTA Image Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc1500 /v 19 7 6 /i ota ota_image To create and program the All-in-one(AIO) Image Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc1500 /v 19 7 6 /e /x /i aio /w firmware_aio Writing to \"Root certificate\" region Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc1500 /v 19 7 6 /i root /w root_certificate_1 Writing to \"HTTP files\" region Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc1500 /v 19 7 6 /i http /w http_file_1 To read the entire flash Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc1500 /v 19 7 6 /r read_flash winc_flash_tool sh This script is for the firmware upgrade in Linux and it uses the \"image_tool\" and \"winc_programmer_uart/i2c\" to build and program the firmware binary image to the WINC devices winc_flash_tool sh usage Usage Command Example To erase the entire flash winc_flash_tool sh -p TTYS0 -d device_name -v version -e To create and program the Firmware Image winc_flash_tool sh -p TTYS0 -d device_name -v version -e -x -i prog -w To create and program the All-in-one(AIO) Image winc_flash_tool sh -p TTYS0 -d device_name -v version -e -x i aio -w To create OTA Image winc_flash_tool sh -p TTYS0 -d device_name -v version -i ota Writing to \"Root certificate\" region winc_flash_tool sh -p TTYS0 -d device_name -v version -i root -w Writing to \"HTTP files\" region winc_flash_tool sh -p TTYS0 -d device_name -v version -i http -w To read the entire flash winc_flash_tool sh -p TTYS0 -d device_name -v version -r Arguments Details -p Serial port for UART mode -d WINC device type -s Aardvark serial number -v Firmware version number -e Erase entire device before programming -x Read XO offset before creating programming image -i Image type:prog - Programmer formataio - All in one image raw binary ota - OTAroot - Root certificates in programmer format http - HTTP files in programmer format -w Write to device -f Filename of image file to create -r Read entire flash from device ",
							" ATWINC1500/ATWINC3400 Binary Tools The script files internally use the following tools to build and program the image image_tool - Builds firmware binary image winc_programmer_uart/i2c – Program the built firmware binary image to the WINC device using UART or I2C interface ",
							" Building Firmware Image image_tool located in {local system path} wireless_wifi utilities wifi winc tools is used to build binary images for ATWINC devices It collects all the binaries for each section and combine it in to one firmware called wincXXXX_X X X bin The image_tool arrange the section according to the flash memory orgianization of ATWINC1500/ATWINC3400 The image_tool collects the information from the flash_image XML file Refer flash_image config XML for how the flash memory is divided User needs to update the flash_image config for updating the root certificate or adding custom provisioning pages The configuration XML file(flash_image config) can be found under {local system path}wireless_wifi utilities wifi winc files wincXXXX X X X directory ",
							" image_tool Usage Usage Command Example To create firmware image image_tool exe -c version flash_image config -c gain_tables gain config -o device_name _ version bin -of prog Writing to a specific region(eg: Root certificate) image_tool exe -c version flash_image config -c gain_tables gain config device_name _ version bin -of prog -r “root certificates\" To create OTA firmware image image_tool exe -c version flash_image config -o device_name _ version bin -of winc_ota -s ota Arguments Details -c Configuration files Microchip recommends to use the default configuration files which is flash_image config -o Output name of the binary image files ATWINC1500: winc1500_X X X bin ATWINC3400: winc3400_X X X bin -of The image_tool supports 4 output formats raw - Raw binary image winc_ota - WINC OTA format prog - Format suitable for programming log - Textual log information -r Specifies a region to process More than one region can be specified with repeated use of this option If used only the regions specified will be processed For more information enter image_tool help command:image_tool -h ",
							" Commands Logs Creating Firmware Image Expected output log for the command: image_tool exe -c 19 7 6 flash_image config -c gain_tables gain config -o winc1500_19 7 6 bin -of prog Writing to a Specific Region Expected output log for the command: image_tool exe -c 19 7 6 flash_image config -c gain_tables gain config winc1500_19 7 6 bin -of prog -r “root certificates\" Creating OTA Firmware Image Expected output log for the command: image_tool exe -c 19 7 6 flash_image config -o winc1500_19 7 6 bin -of winc_ota -s ota ",
							" Programming Firmware Image winc_programmer_uart/i2c tool located in src/firmware/firmware is used to program the binary images for ATWINC1500/ATWINC3400 devices using UART or I2C interface it does the following primary jobs: Erase the ATWINC1500/ATWINC3400 memory Read the firmware from ATWINC1500/ATWINC3400 Write the firmware to ATWINC1500/ATWINC3400 Verify the written firmware ",
							" winc_programmer_uart Tool Usage Usage Command Example Erase ATWINC1500/ATWINC3400 flash memory winc_programmer_uart exe -p COM16 -d device_name -e -pfw version firmware programmer_firmware bin Write the created binary image to ATWINC1500/ATWINC3400 flash memory winc_programmer_uart exe -p COM16 -d device_name -i device_name _ version bin -if prog -w -pfw version firmware programmer_firmware bin Verify the written image in ATWINC1500/ATWINC3400 device winc_programmer_uart exe -p COM16 -d device_name -i device_name _ version bin -if prog -r -pfw version firmware programmer_firmware bin Single command (including all the above operations) winc_programmer_UART exe -p COM16 -d device_name -e -i device_name _ version bin -if prog -w -r -pfw version firmware programmer_firmware bin Arguments Details -p Port number of the connected HostMCU COM Port Command to find the Port number: test_edbg -d ATWINC device: winc1500 or winc3400 -e To erase the ATWINC1500/ATWINC3400 device flash memory before writing the firmware image -w To write the firmware image -r To read the firmware image -if Input format: winc_ota - WINC OTA format raw - A raw binary image prog - Format suitable for programming -pfw programming firmware : WINC firmware used to program the device For more information enter winc_programmer_uart help command: winc_programmer_uart exe -h ",
							" Commands logs Erase WINC memory Expected output log for the command: winc_programmer_uart exe -p COM3 -d winc1500 -e -pfw 19 7 6 firmware programmer_firmware bin Write Firmware Image to WINC Note: Before executing this command user should create the firmware image of required version (winc1500_version bin) using image_tool Expected output log for the command: winc_programmer_uart exe -p COM3 -d winc1500 -i winc1500_19 7 6 bin -if prog -w -pfw 19 7 6 firmware programmer_firmware bin Read Firmware Image from WINC memory Expected output log for the Command: winc_programmer_uart exe -p COM3 -d winc1500 -r -pfw 19 7 6 firmware programmer_firmware bin read_firmware Verify the Written Image Expected output log for the command: winc_programmer_uart exe -p COM3 -d winc1500 -i winc1500_19 7 6 bin -if prog -r -pfw 19 7 6 firmware programmer_firmware bin Consolidated Single Command: This command does all the all the above operations in a single command Note: Before executing this command user should create the firmware image of required version (winc1500_version bin) using image_tool Expected output log for the command: winc_programmer_UART exe -p COM3 -d winc1500 -e -i winc1500_19 7 6 bin -if prog -w -r -pfw 19 7 6 firmware programmer_firmware bin consolidated ",
							" Download Failure Troubleshooting Here are the troubleshooting tips for a specific error while downloading using batch script The script Failed To Find Any COM Port The winc_programmer_uart exe expects a COM port as an argument If the expected COM port is not found then it will provide the below error com_port_failed How to fix it: Make sure ATWINC1500/ATWINC3400 COM port is listed in the device manager Make sure ATWINC1500/ATWINC3400 COM port is not opened by any other application For verification try to open and close the COM port with a terminal application low quality USB cable or low quality serial to USB converter (built-in UART) can introduce garbage on the UART line thus failing the detection of the ATWINC1500/ATWINC3400 COM port Try a different cable When performing a “built-in UART download” it is expected that the ATWINC1500/ATWINC3400 bootloader is in a particular state that can only be achieved after doing a clean power up and reset sequence Hence before doing a download always ensure that a clean power up and reset sequence has been made Make sure that no other extension board (ex: IO1…) is connected to the Xplained Pro board while performing the download Make sure the project path is not exceeding Windows maximum 260 characters path length Failed To Initialize Programmer: Invalid Chip ID The Failed to initialize programmer with Invalid chip ID error typically happens when there is garbage or noise on the UART line preventing from reading the correct chip ID value How to fix it: Try connecting the PC and the ATWINC1500/ATWINC3400 with a different cable A clean power up and reset sequence of the ATWINC1500/ATWINC3400 is necessary to start over with the ATWINC1500/ATWINC3400 bootloader in the appropriate state Failed To Initialize Programmer: Waiting For Chip Permission After printing the correct chip ID of the ATWINC1500/ATWINC3400 the winc_programmer_UART tool programs a small binary (programmer firmware) to assist with ATWINC1500/ATWINC3400 flash programming At this stage the winc_programmer_UART will change the UART baud rate from 115200 to 500000 to speed up the actual transfer of the firmware image Once the baud rate change is made the chip permission is verified to ensure the UART connection is reliable Failing at this stage means that the current setup does not support such a high baud rate How to fix it: It is recommended to try connecting the PC and the ATWINC1500/ATWINC3400 with a different cable Also a clean power up and reset sequence of the ATWINC1500/ATWINC3400 is necessary to start over with the ATWINC1500/ATWINC3400 bootloader in the appropriate state ",
							" Create WINC Project - Getting Started ",
							" Download wireless repository from Github After the installation open the MPLAB IDE and launch H3 content manager from the IDE Please provide the framework path with the local system path This displays a new window as shown below Using this window user can download either all the packages or only the wireless packages with its required dependencies To download the wireless packages and its dependencies: Scroll down and select wireless_wifi wireless_apps_winc1500 and wireless_apps_winc3400  Click Download Selected It requests permission to download its dependencies Click OK In the License Window Select Accept All License Click Close Go to the local system path and check if the following packages are downloaded correctly ",
							" Pin mapping between host and WINC This section explains how to map pins between WINC1500/WINC3400 device and host to establish connection and exchange data Totally 7/11 pins are involved in pin mapping (except VCC and GND) and they are SPI (SS CLOCK MOSI and MISO) Reset Chip Enable Interrupt UART only applicable for WINC3400 BLE (Tx Rx CTS and RTS) SAME54 and SAMD21 is used as example host throughout this document for both WINC1500 and WINC3400 SAME54 / SAMD21 XPRO board is used as the host development board and WINC1500 XPRO / WINC3400 XPRO is used as development board Host and the WINC device are connected through extension headers In this document Extension 1 of SAME54 / SAMD21 host is used to connect with WINC device The one to one pin mapping can be performed between SAME54 / SAMD21 XPRO extension header and WINC XPRO extension header by referring the following sections of the document Table 4-1 section under 4 1 1 of WINC1500 Xplained Pro User's Guide Table 4-1 section under 4 1 1 of WINC3400 Xplained Pro User's Guide Table 5-1 section under 5 2 1 of SAM E54 Xplained Pro User's Guide Table 4-1 section under 4 1 1 of SAM D21 Xplained Pro User's Guide In the same way if the user is using a different host then he can perform one to one pin mapping by referring that host’s user guide ",
							" SPI interface Communication between SAME54 / SAMD21 and WINC happens through SPI interface Here WINC acts as a slave and SAME54 / SAMD21 acts as master The below table lists the SPI pins of WINC extension and its corresponding pins of SAME54 and SAMD21 ",
							" Power up pins Reset and Chip Enable pins are used to perform power up sequence in WINC from host The below table lists the power up pins of WINC extension and its corresponding pins of SAME54 / SAMD21 ",
							" WINC1500 Power up pins ",
							" WINC3400 Power up pins ",
							" Interrupt pin Interrupt pin is used to send signal to host from WINC device ",
							" Microchip Information ",
							" The Microchip Website  Microchip provides online support via our website at This website is used to make files and information easily available to customers Some of the content available includes:   Product Support – Data sheets and errata application notes and sample programs design resources user’s guides and hardware support documents latest software releases and archived software  General Technical Support – Frequently Asked Questions (FAQs) technical support requests online discussion groups Microchip design partner program member listing  Business of Microchip – Product selector and ordering guides latest Microchip press releases listing of seminars and events listings of Microchip sales offices distributors and factory representatives   ",
							" Product Change Notification Service  Microchip’s product change notification service helps keep customers current on Microchip products Subscribers will receive email notification whenever there are changes updates revisions or errata related to a specified product family or development tool of interest  To register go to and follow the registration instructions  ",
							" Customer Support  Users of Microchip products can receive assistance through several channels:   Distributor or Representative  Local Sales Office  Embedded Solutions Engineer (ESE)  Technical Support   Customers should contact their distributor representative or ESE for support Local sales offices are also available to help customers A listing of sales offices and locations is included in this document  Technical support is available through the website at:  ",
							" Microchip Devices Code Protection Feature  Note the following details of the code protection feature on Microchip products:   Microchip products meet the specifications contained in their particular Microchip Data Sheet  Microchip believes that its family of products is secure when used in the intended manner within operating specifications and under normal conditions  Microchip values and aggressively protects its intellectual property rights Attempts to breach the code protection features of Microchip product is strictly prohibited and may violate the Digital Millennium Copyright Act  Neither Microchip nor any other semiconductor manufacturer can guarantee the security of its code Code protection does not mean that we are guaranteeing the product is “unbreakable” Code protection is constantly evolving Microchip is committed to continuously improving the code protection features of our products   ",
							" Legal Notice  This publication and the information herein may be used only with Microchip products including to design test and integrate Microchip products with your application Use of this information in any other manner violates these terms Information regarding device applications is provided only for your convenience and may be superseded by updates It is your responsibility to ensure that your application meets with your specifications Contact your local Microchip sales office for additional support or obtain additional support at   THIS INFORMATION IS PROVIDED BY MICROCHIP \"AS IS\" MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND WHETHER EXPRESS OR IMPLIED WRITTEN OR ORAL STATUTORY OR OTHERWISE RELATED TO THE INFORMATION INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES RELATED TO ITS CONDITION QUALITY OR PERFORMANCE  IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT SPECIAL PUNITIVE INCIDENTAL OR CONSEQUENTIAL LOSS DAMAGE COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE INFORMATION OR ITS USE HOWEVER CAUSED EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE TO THE FULLEST EXTENT ALLOWED BY LAW MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THE INFORMATION OR ITS USE WILL NOT EXCEED THE AMOUNT OF FEES IF ANY THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THE INFORMATION  Use of Microchip devices in life support and/or safety applications is entirely at the buyer's risk and the buyer agrees to defend indemnify and hold harmless Microchip from any and all damages claims suits or expenses resulting from such use No licenses are conveyed implicitly or otherwise under any Microchip intellectual property rights unless otherwise stated  ",
							" Trademarks  The Microchip name and logo the Microchip logo Adaptec AVR AVR logo AVR Freaks BesTime BitCloud CryptoMemory CryptoRF dsPIC flexPWR HELDO IGLOO JukeBlox KeeLoq Kleer LANCheck LinkMD maXStylus maXTouch MediaLB megaAVR Microsemi Microsemi logo MOST MOST logo MPLAB OptoLyzer PIC picoPower PICSTART PIC32 logo PolarFire Prochip Designer QTouch SAM-BA SenGenuity SpyNIC SST SST Logo SuperFlash Symmetricom SyncServer Tachyon TimeSource tinyAVR UNI/O Vectron and XMEGA are registered trademarks of Microchip Technology Incorporated in the U S A and other countries  AgileSwitch APT ClockWorks The Embedded Control Solutions Company EtherSynch Flashtec Hyper Speed Control HyperLight Load Libero motorBench mTouch Powermite 3 Precision Edge ProASIC ProASIC Plus ProASIC Plus logo Quiet- Wire SmartFusion SyncWorld Temux TimeCesium TimeHub TimePictra TimeProvider TrueTime and ZL are registered trademarks of Microchip Technology Incorporated in the U S A  Adjacent Key Suppression AKS Analog-for-the-Digital Age Any Capacitor AnyIn AnyOut Augmented Switching BlueSky BodyCom Clockstudio CodeGuard CryptoAuthentication CryptoAutomotive CryptoCompanion CryptoController dsPICDEM dsPICDEM net Dynamic Average Matching DAM ECAN Espresso T1S EtherGREEN GridTime IdealBridge In-Circuit Serial Programming ICSP INICnet Intelligent Paralleling IntelliMOS Inter-Chip Connectivity JitterBlocker Knob-on-Display KoD maxCrypto maxView memBrain Mindi MiWi MPASM MPF MPLAB Certified logo MPLIB MPLINK MultiTRAK NetDetach Omniscient Code Generation PICDEM PICDEM net PICkit PICtail PowerSmart PureSilicon QMatrix REAL ICE Ripple Blocker RTAX RTG4 SAM-ICE Serial Quad I/O simpleMAP SimpliPHY SmartBuffer SmartHLS SMART-I S storClad SQI SuperSwitcher SuperSwitcher II Switchtec SynchroPHY Total Endurance Trusted Time TSHARC USBCheck VariSense VectorBlox VeriPHY ViewSpan WiperLock XpressConnect and ZENA are trademarks of Microchip Technology Incorporated in the U S A and other countries  SQTP is a service mark of Microchip Technology Incorporated in the U S A  The Adaptec logo Frequency on Demand Silicon Storage Technology and Symmcom are registered trademarks of Microchip Technology Inc in other countries  GestIC is a registered trademark of Microchip Technology Germany II GmbH Co KG a subsidiary of Microchip Technology Inc in other countries  All other trademarks mentioned herein are property of their respective companies  © Microchip Technology Incorporated and its subsidiaries All Rights Reserved  ISBN:  ",
							" Quality Management System   For information regarding Microchip’s Quality Management Systems please visit    ",
							" Worldwide Sales and Service          AMERICAS  ASIA/PACIFIC  ASIA/PACIFIC  EUROPE       Corporate Office  2355 West Chandler Blvd  Chandler AZ 85224-6199  Tel: 480-792-7200  Fax: 480-792-7277  Technical Support:   Web Address:   Atlanta  Duluth GA  Tel: 678-957-9614  Fax: 678-957-1455  Austin TX  Tel: 512-257-3370  Boston  Westborough MA  Tel: 774-760-0087  Fax: 774-760-0088  Chicago  Itasca IL  Tel: 630-285-0071  Fax: 630-285-0075  Dallas  Addison TX  Tel: 972-818-7423  Fax: 972-818-2924  Detroit  Novi MI  Tel: 248-848-4000  Houston TX  Tel: 281-894-5983  Indianapolis  Noblesville IN  Tel: 317-773-8323  Fax: 317-773-5453  Tel: 317-536-2380  Los Angeles  Mission Viejo CA  Tel: 949-462-9523  Fax: 949-462-9608  Tel: 951-273-7800  Raleigh NC  Tel: 919-844-7510  New York NY  Tel: 631-435-6000  San Jose CA  Tel: 408-735-9110  Tel: 408-436-4270  Canada - Toronto  Tel: 905-695-1980  Fax: 905-695-2078    Australia - Sydney  Tel: 61-2-9868-6733  China - Beijing  Tel: 86-10-8569-7000  China - Chengdu  Tel: 86-28-8665-5511  China - Chongqing  Tel: 86-23-8980-9588  China - Dongguan  Tel: 86-769-8702-9880  China - Guangzhou  Tel: 86-20-8755-8029  China - Hangzhou  Tel: 86-571-8792-8115  China - Hong Kong SAR  Tel: 852-2943-5100  China - Nanjing  Tel: 86-25-8473-2460  China - Qingdao  Tel: 86-532-8502-7355  China - Shanghai  Tel: 86-21-3326-8000  China - Shenyang  Tel: 86-24-2334-2829  China - Shenzhen  Tel: 86-755-8864-2200  China - Suzhou  Tel: 86-186-6233-1526  China - Wuhan  Tel: 86-27-5980-5300  China - Xian  Tel: 86-29-8833-7252  China - Xiamen  Tel: 86-592-2388138  China - Zhuhai  Tel: 86-756-3210040    India - Bangalore  Tel: 91-80-3090-4444  India - New Delhi  Tel: 91-11-4160-8631  India - Pune  Tel: 91-20-4121-0141  Japan - Osaka  Tel: 81-6-6152-7160  Japan - Tokyo  Tel: 81-3-6880- 3770  Korea - Daegu  Tel: 82-53-744-4301  Korea - Seoul  Tel: 82-2-554-7200  Malaysia - Kuala Lumpur  Tel: 60-3-7651-7906  Malaysia - Penang  Tel: 60-4-227-8870  Philippines - Manila  Tel: 63-2-634-9065  Singapore  Tel: 65-6334-8870  Taiwan - Hsin Chu  Tel: 886-3-577-8366  Taiwan - Kaohsiung  Tel: 886-7-213-7830  Taiwan - Taipei  Tel: 886-2-2508-8600  Thailand - Bangkok  Tel: 66-2-694-1351  Vietnam - Ho Chi Minh  Tel: 84-28-5448-2100    Austria - Wels  Tel: 43-7242-2244-39  Fax: 43-7242-2244-393  Denmark - Copenhagen  Tel: 45-4485-5910  Fax: 45-4485-2829  Finland - Espoo  Tel: 358-9-4520-820  France - Paris  Tel: 33-1-69-53-63-20  Fax: 33-1-69-30-90-79  Germany - Garching  Tel: 49-8931-9700  Germany - Haan  Tel: 49-2129-3766400  Germany - Heilbronn  Tel: 49-7131-72400  Germany - Karlsruhe  Tel: 49-721-625370  Germany - Munich  Tel: 49-89-627-144-0  Fax: 49-89-627-144-44  Germany - Rosenheim  Tel: 49-8031-354-560  Israel - Ra’anana  Tel: 972-9-744-7705  Italy - Milan  Tel: 39-0331-742611  Fax: 39-0331-466781  Italy - Padova  Tel: 39-049-7625286  Netherlands - Drunen  Tel: 31-416-690399  Fax: 31-416-690340  Norway - Trondheim  Tel: 47-72884388  Poland - Warsaw  Tel: 48-22-3325737  Romania - Bucharest  Tel: 40-21-407-87-50  Spain - Madrid  Tel: 34-91-708-08-90  Fax: 34-91-708-08-91  Sweden - Gothenberg  Tel: 46-31-704-60-40  Sweden - Stockholm  Tel: 46-8-5090-4654  UK - Wokingham  Tel: 44-118-921-5800  Fax: 44-118-921-5820       "];

